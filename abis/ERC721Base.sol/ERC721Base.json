{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "batchMintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isApprovedOrOwnerOf",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b50604051620029aa380380620029aa83398101604081905262000034916200024e565b8383600262000044838262000389565b50600362000053828262000389565b50506000805550620000653362000084565b6200007a826001600160801b038316620000d6565b5050505062000455565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6127108111156200011f5760405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d61782062707360881b604482015260640160405180910390fd5b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001a957600080fd5b81516001600160401b0380821115620001c657620001c662000181565b604051601f8301601f19908116603f01168101908282118183101715620001f157620001f162000181565b816040528381526020925086838588010111156200020e57600080fd5b600091505b8382101562000232578582018301518183018401529082019062000213565b83821115620002445760008385830101525b9695505050505050565b600080600080608085870312156200026557600080fd5b84516001600160401b03808211156200027d57600080fd5b6200028b8883890162000197565b95506020870151915080821115620002a257600080fd5b50620002b18782880162000197565b604087015190945090506001600160a01b0381168114620002d157600080fd5b60608601519092506001600160801b0381168114620002ef57600080fd5b939692955090935050565b600181811c908216806200030f57607f821691505b6020821081036200033057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200038457600081815260208120601f850160051c810160208610156200035f5750805b601f850160051c820191505b8181101562000380578281556001016200036b565b5050505b505050565b81516001600160401b03811115620003a557620003a562000181565b620003bd81620003b68454620002fa565b8462000336565b602080601f831160018114620003f55760008415620003dc5750858301515b600019600386901b1c1916600185901b17855562000380565b600085815260208120601f198616915b82811015620004265788860151825594840194600190910190840162000405565b5085821015620004455787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61254580620004656000396000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c8063600dd5ea1161010f5780639bcf7a15116100a2578063b88d4fde11610071578063b88d4fde14610454578063c87b56dd14610467578063e8a3d4851461047a578063e985e9c51461048257600080fd5b80639bcf7a15146103f0578063a22cb46514610403578063ac9650d814610416578063b24f2d391461043657600080fd5b8063754a81d9116100de578063754a81d9146103b15780638da5cb5b146103c4578063938e3d7b146103d557806395d89b41146103e857600080fd5b8063600dd5ea146103705780636352211e1461038357806363b45e2d1461039657806370a082311461039e57600080fd5b806323b872dd1161018757806342842e0e1161015657806342842e0e1461030257806342966c6814610315578063430c2081146103285780634cc157df1461033b57600080fd5b806323b872dd146102a25780632419f51b146102b55780632a55205a146102c85780633b1475a7146102fa57600080fd5b8063081812fc116101c3578063081812fc1461023b578063095ea7b31461026657806313af40351461027957806318160ddd1461028c57600080fd5b806275a317146101e957806301ffc9a7146101fe57806306fdde0314610226575b600080fd5b6101fc6101f7366004611d55565b6104be565b005b61021161020c366004611db8565b610559565b60405190151581526020015b60405180910390f35b61022e6105c6565b60405161021d9190611e2d565b61024e610249366004611e40565b610658565b6040516001600160a01b03909116815260200161021d565b6101fc610274366004611e59565b61069c565b6101fc610287366004611e83565b610722565b600154600054035b60405190815260200161021d565b6101fc6102b0366004611e9e565b610752565b6102946102c3366004611e40565b61075d565b6102db6102d6366004611eda565b6107cb565b604080516001600160a01b03909316835260208301919091520161021d565b600054610294565b6101fc610310366004611e9e565b610808565b6101fc610323366004611e40565b610823565b610211610336366004611e59565b61082e565b61034e610349366004611e40565b6108ad565b604080516001600160a01b03909316835261ffff90911660208301520161021d565b6101fc61037e366004611e59565b610918565b61024e610391366004611e40565b610946565b600c54610294565b6102946103ac366004611e83565b610958565b6101fc6103bf366004611efc565b6109a6565b6009546001600160a01b031661024e565b6101fc6103e3366004611f79565b610a1a565b61022e610a47565b6101fc6103fe366004611fad565b610a56565b6101fc610411366004611fd2565b610a85565b61042961042436600461200e565b610b1a565b60405161021d9190612082565b600a546001600160a01b03811690600160a01b900461ffff1661034e565b6101fc6104623660046120e4565b610c0e565b61022e610475366004611e40565b610c52565b61022e610d40565b61021161049036600461213f565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b6104c6610dce565b6105115760405162461bcd60e51b81526020600482015260176024820152762737ba1030baba3437b934bd32b2103a379036b4b73a1760491b60448201526064015b60405180910390fd5b80600e600061051f60005490565b8152602001908152602001600020908161053991906121fa565b5061055582600160405180602001604052806000815250610dfb565b5050565b60006301ffc9a760e01b6001600160e01b03198316148061058a57506380ac58cd60e01b6001600160e01b03198316145b806105a55750635b5e139f60e01b6001600160e01b03198316145b806105c057506001600160e01b0319821663152a902d60e11b145b92915050565b6060600280546105d590612172565b80601f016020809104026020016040519081016040528092919081815260200182805461060190612172565b801561064e5780601f106106235761010080835404028352916020019161064e565b820191906000526020600020905b81548152906001019060200180831161063157829003601f168201915b5050505050905090565b600061066382610f9e565b610680576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006106a782610946565b9050806001600160a01b0316836001600160a01b0316036106db5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614610712576106f58133610490565b610712576040516367d9dca160e11b815260040160405180910390fd5b61071d838383610fc9565b505050565b61072a610dce565b6107465760405162461bcd60e51b8152600401610508906122b9565b61074f81611025565b50565b61071d838383611077565b6000610768600c5490565b82106107a65760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610508565b600c82815481106107b9576107b96122e1565b90600052602060002001549050919050565b6000806000806107da866108ad565b90945084925061ffff1690506127106107f3828761230d565b6107fd9190612342565b925050509250929050565b61071d83838360405180602001604052806000815250610c0e565b61074f816001611252565b60008061083a83610946565b9050806001600160a01b0316846001600160a01b0316148061088157506001600160a01b0380821660009081526007602090815260408083209388168352929052205460ff165b806108a55750836001600160a01b031661089a84610658565b6001600160a01b0316145b949350505050565b6000818152600b60209081526040808320815180830190925280546001600160a01b0316808352600190910154928201929092528291156108f4578051602082015161090e565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b610920610dce565b61093c5760405162461bcd60e51b8152600401610508906122b9565b6105558282611405565b6000610951826114ab565b5192915050565b60006001600160a01b038216610981576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6109ae610dce565b6109f45760405162461bcd60e51b81526020600482015260176024820152762737ba1030baba3437b934bd32b2103a379036b4b73a1760491b6044820152606401610508565b610a07610a0060005490565b84846115c5565b5050610a14848483610dfb565b50505050565b610a22610dce565b610a3e5760405162461bcd60e51b8152600401610508906122b9565b61074f81611629565b6060600380546105d590612172565b610a5e610dce565b610a7a5760405162461bcd60e51b8152600401610508906122b9565b61071d838383611705565b336001600160a01b03831603610aae5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6060816001600160401b03811115610b3457610b34611cb3565b604051908082528060200260200182016040528015610b6757816020015b6060815260200190600190039081610b525790505b50905060005b82811015610c0757610bd730858584818110610b8b57610b8b6122e1565b9050602002810190610b9d9190612356565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506117ce92505050565b828281518110610be957610be96122e1565b60200260200101819052508080610bff906123a3565b915050610b6d565b5092915050565b610c19848484611077565b6001600160a01b0383163b15610a1457610c35848484846117fa565b610a14576040516368d2bf6b60e11b815260040160405180910390fd5b6000818152600e6020526040812080546060929190610c7090612172565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9c90612172565b8015610ce95780601f10610cbe57610100808354040283529160200191610ce9565b820191906000526020600020905b815481529060010190602001808311610ccc57829003601f168201915b50505050509050600081511115610d005792915050565b6000610d0b846118e5565b905080610d1785611a81565b604051602001610d289291906123bc565b60405160208183030381529060405292505050919050565b60088054610d4d90612172565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7990612172565b8015610dc65780601f10610d9b57610100808354040283529160200191610dc6565b820191906000526020600020905b815481529060010190602001808311610da957829003601f168201915b505050505081565b6000610de26009546001600160a01b031690565b6001600160a01b0316336001600160a01b031614905090565b6000546001600160a01b038416610e2457604051622e076360e81b815260040160405180910390fd5b82600003610e455760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546fffffffffffffffffffffffffffffffff1981166001600160401b038083168b0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b42909316929092029190911790558190818501903b15610f5b575b60405182906001600160a01b038816906000906000805160206124f0833981519152908290a4610f2460008784806001019550876117fa565b610f41576040516368d2bf6b60e11b815260040160405180910390fd5b808210610eeb578260005414610f5657600080fd5b610f8e565b5b6040516001830192906001600160a01b038816906000906000805160206124f0833981519152908290a4808210610f5c575b506000908155610a149085838684565b60008054821080156105c0575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6000611082826114ab565b9050836001600160a01b031681600001516001600160a01b0316146110b95760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806110d757506110d78533610490565b806110f25750336110e784610658565b6001600160a01b0316145b90508061111257604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661113957604051633a954ecd60e21b815260040160405180910390fd5b61114560008487610fc9565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661121957600054821461121957805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03166000805160206124f083398151915260405160405180910390a45050505050565b600061125d836114ab565b805190915082156112c3576000336001600160a01b038316148061128657506112868233610490565b806112a157503361129686610658565b6001600160a01b0316145b9050806112c157604051632ce44b5f60e11b815260040160405180910390fd5b505b6112cf60008583610fc9565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b0380841691909101811667ffffffffffffffff198416811783900482166001908101831690930277ffffffffffffffff0000000000000000ffffffffffffffff19909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b1785559189018084529220805491949091166113cd5760005482146113cd57805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b038416906000805160206124f0833981519152908390a4505060018054810190555050565b6127108111156114495760405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d61782062707360881b6044820152606401610508565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b6040805160608101825260008082526020820181905291810191909152816000548110156115ac57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906115aa5780516001600160a01b031615611541579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff16151592810192909252156115a5579392505050565b611541565b505b604051636f96cda160e11b815260040160405180910390fd5b6000806115d284866123eb565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d6020526040902090925082915061162084826121fa565b50935093915050565b60006008805461163890612172565b80601f016020809104026020016040519081016040528092919081815260200182805461166490612172565b80156116b15780601f10611686576101008083540402835291602001916116b1565b820191906000526020600020905b81548152906001019060200180831161169457829003601f168201915b5050505050905081600890816116c791906121fa565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a1681836040516116f9929190612403565b60405180910390a15050565b6127108111156117495760405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d61782062707360881b6044820152606401610508565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b60606117f383836040518060600160405280602781526020016124c960279139611b81565b9392505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061182f903390899088908890600401612431565b6020604051808303816000875af192505050801561186a575060408051601f3d908101601f1916820190925261186791810190612464565b60015b6118c8573d808015611898576040519150601f19603f3d011682016040523d82523d6000602084013e61189d565b606091505b5080516000036118c0576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b606060006118f2600c5490565b90506000600c80548060200260200160405190810160405280929190818152602001828054801561194257602002820191906000526020600020905b81548152602001906001019080831161192e575b5050505050905060005b82811015611a4657818181518110611966576119666122e1565b6020026020010151851015611a3457600d600083838151811061198b5761198b6122e1565b6020026020010151815260200190815260200160002080546119ac90612172565b80601f01602080910402602001604051908101604052809291908181526020018280546119d890612172565b8015611a255780601f106119fa57610100808354040283529160200191611a25565b820191906000526020600020905b815481529060010190602001808311611a0857829003601f168201915b50505050509350505050919050565b611a3f6001826123eb565b905061194c565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610508565b606081600003611aa85750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611ad25780611abc816123a3565b9150611acb9050600a83612342565b9150611aac565b6000816001600160401b03811115611aec57611aec611cb3565b6040519080825280601f01601f191660200182016040528015611b16576020820181803683370190505b5090505b84156108a557611b2b600183612481565b9150611b38600a86612498565b611b439060306123eb565b60f81b818381518110611b5857611b586122e1565b60200101906001600160f81b031916908160001a905350611b7a600a86612342565b9450611b1a565b60606001600160a01b0384163b611be95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610508565b600080856001600160a01b031685604051611c0491906124ac565b600060405180830381855af49150503d8060008114611c3f576040519150601f19603f3d011682016040523d82523d6000602084013e611c44565b606091505b5091509150611c54828286611c5e565b9695505050505050565b60608315611c6d5750816117f3565b825115611c7d5782518084602001fd5b8160405162461bcd60e51b81526004016105089190611e2d565b80356001600160a01b0381168114611cae57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611cda57600080fd5b81356001600160401b0380821115611cf457611cf4611cb3565b604051601f8301601f19908116603f01168101908282118183101715611d1c57611d1c611cb3565b81604052838152866020858801011115611d3557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215611d6857600080fd5b611d7183611c97565b915060208301356001600160401b03811115611d8c57600080fd5b611d9885828601611cc9565b9150509250929050565b6001600160e01b03198116811461074f57600080fd5b600060208284031215611dca57600080fd5b81356117f381611da2565b60005b83811015611df0578181015183820152602001611dd8565b83811115610a145750506000910152565b60008151808452611e19816020860160208601611dd5565b601f01601f19169290920160200192915050565b6020815260006117f36020830184611e01565b600060208284031215611e5257600080fd5b5035919050565b60008060408385031215611e6c57600080fd5b611e7583611c97565b946020939093013593505050565b600060208284031215611e9557600080fd5b6117f382611c97565b600080600060608486031215611eb357600080fd5b611ebc84611c97565b9250611eca60208501611c97565b9150604084013590509250925092565b60008060408385031215611eed57600080fd5b50508035926020909101359150565b60008060008060808587031215611f1257600080fd5b611f1b85611c97565b93506020850135925060408501356001600160401b0380821115611f3e57600080fd5b611f4a88838901611cc9565b93506060870135915080821115611f6057600080fd5b50611f6d87828801611cc9565b91505092959194509250565b600060208284031215611f8b57600080fd5b81356001600160401b03811115611fa157600080fd5b6108a584828501611cc9565b600080600060608486031215611fc257600080fd5b83359250611eca60208501611c97565b60008060408385031215611fe557600080fd5b611fee83611c97565b91506020830135801515811461200357600080fd5b809150509250929050565b6000806020838503121561202157600080fd5b82356001600160401b038082111561203857600080fd5b818501915085601f83011261204c57600080fd5b81358181111561205b57600080fd5b8660208260051b850101111561207057600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156120d757603f198886030184526120c5858351611e01565b945092850192908501906001016120a9565b5092979650505050505050565b600080600080608085870312156120fa57600080fd5b61210385611c97565b935061211160208601611c97565b92506040850135915060608501356001600160401b0381111561213357600080fd5b611f6d87828801611cc9565b6000806040838503121561215257600080fd5b61215b83611c97565b915061216960208401611c97565b90509250929050565b600181811c9082168061218657607f821691505b6020821081036121a657634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561071d57600081815260208120601f850160051c810160208610156121d35750805b601f850160051c820191505b818110156121f2578281556001016121df565b505050505050565b81516001600160401b0381111561221357612213611cb3565b612227816122218454612172565b846121ac565b602080601f83116001811461225c57600084156122445750858301515b600019600386901b1c1916600185901b1785556121f2565b600085815260208120601f198616915b8281101561228b5788860151825594840194600190910190840161226c565b50858210156122a95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612327576123276122f7565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826123515761235161232c565b500490565b6000808335601e1984360301811261236d57600080fd5b8301803591506001600160401b0382111561238757600080fd5b60200191503681900382131561239c57600080fd5b9250929050565b6000600182016123b5576123b56122f7565b5060010190565b600083516123ce818460208801611dd5565b8351908301906123e2818360208801611dd5565b01949350505050565b600082198211156123fe576123fe6122f7565b500190565b6040815260006124166040830185611e01565b82810360208401526124288185611e01565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611c5490830184611e01565b60006020828403121561247657600080fd5b81516117f381611da2565b600082821015612493576124936122f7565b500390565b6000826124a7576124a761232c565b500690565b600082516124be818460208701611dd5565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220468f5b52df646037a87f50c138f0e1f832c44acac36688fbad2646acf15f9d3964736f6c634300080f0033",
    "sourceMap": "1041:6129:23:-:0;;;1582:272;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1732:5;1739:7;1850:5:25;:13;1732:5:23;1850::25;:13;:::i;:::-;-1:-1:-1;1873:7:25;:17;1883:7;1873;:17;:::i;:::-;-1:-1:-1;;2086:7:25;1900:31;;-1:-1:-1;1758:23:23::1;1770:10;1758:11;:23::i;:::-;1791:56;1816:17:::0;-1:-1:-1;;;;;1791:56:23;::::1;:24;:56::i;:::-;1582:272:::0;;;;1041:6129;;1399:172:34;1479:6;;;-1:-1:-1;;;;;1495:18:34;;;-1:-1:-1;;;;;;1495:18:34;;;;;;;1529:35;;1479:6;;;1495:18;1479:6;;1529:35;;1458:18;;1529:35;1448:123;1399:172;:::o;3408:334:35:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:35;;4737:2:48;3549:25:35;;;4719:21:48;4776:2;4756:18;;;4749:30;-1:-1:-1;;;4795:18:48;;;4788:45;4850:18;;3549:25:35;;;;;;;3509:76;3595:16;:36;;-1:-1:-1;;;;;3595:36:35;;-1:-1:-1;;;;;;3641:32:35;;;;;-1:-1:-1;;;3641:32:35;;;;;;;;3689:46;;5025:25:48;;;3689:46:35;;5013:2:48;4998:18;3689:46:35;;;;;;;3408:334;;:::o;14:127:48:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:48;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:48;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:48:o;1036:905::-;1153:6;1161;1169;1177;1230:3;1218:9;1209:7;1205:23;1201:33;1198:53;;;1247:1;1244;1237:12;1198:53;1274:16;;-1:-1:-1;;;;;1339:14:48;;;1336:34;;;1366:1;1363;1356:12;1336:34;1389:61;1442:7;1433:6;1422:9;1418:22;1389:61;:::i;:::-;1379:71;;1496:2;1485:9;1481:18;1475:25;1459:41;;1525:2;1515:8;1512:16;1509:36;;;1541:1;1538;1531:12;1509:36;;1564:63;1619:7;1608:8;1597:9;1593:24;1564:63;:::i;:::-;1670:2;1655:18;;1649:25;1554:73;;-1:-1:-1;1649:25:48;-1:-1:-1;;;;;;1703:31:48;;1693:42;;1683:70;;1749:1;1746;1739:12;1683:70;1822:2;1807:18;;1801:25;1772:5;;-1:-1:-1;;;;;;1857:33:48;;1845:46;;1835:74;;1905:1;1902;1895:12;1835:74;1036:905;;;;-1:-1:-1;1036:905:48;;-1:-1:-1;;1036:905:48:o;1946:380::-;2025:1;2021:12;;;;2068;;;2089:61;;2143:4;2135:6;2131:17;2121:27;;2089:61;2196:2;2188:6;2185:14;2165:18;2162:38;2159:161;;2242:10;2237:3;2233:20;2230:1;2223:31;2277:4;2274:1;2267:15;2305:4;2302:1;2295:15;2159:161;;1946:380;;;:::o;2457:545::-;2559:2;2554:3;2551:11;2548:448;;;2595:1;2620:5;2616:2;2609:17;2665:4;2661:2;2651:19;2735:2;2723:10;2719:19;2716:1;2712:27;2706:4;2702:38;2771:4;2759:10;2756:20;2753:47;;;-1:-1:-1;2794:4:48;2753:47;2849:2;2844:3;2840:12;2837:1;2833:20;2827:4;2823:31;2813:41;;2904:82;2922:2;2915:5;2912:13;2904:82;;;2967:17;;;2948:1;2937:13;2904:82;;;2908:3;;;2548:448;2457:545;;;:::o;3178:1352::-;3298:10;;-1:-1:-1;;;;;3320:30:48;;3317:56;;;3353:18;;:::i;:::-;3382:97;3472:6;3432:38;3464:4;3458:11;3432:38;:::i;:::-;3426:4;3382:97;:::i;:::-;3534:4;;3598:2;3587:14;;3615:1;3610:663;;;;4317:1;4334:6;4331:89;;;-1:-1:-1;4386:19:48;;;4380:26;4331:89;-1:-1:-1;;3135:1:48;3131:11;;;3127:24;3123:29;3113:40;3159:1;3155:11;;;3110:57;4433:81;;3580:944;;3610:663;2404:1;2397:14;;;2441:4;2428:18;;-1:-1:-1;;3646:20:48;;;3764:236;3778:7;3775:1;3772:14;3764:236;;;3867:19;;;3861:26;3846:42;;3959:27;;;;3927:1;3915:14;;;;3794:19;;3764:236;;;3768:3;4028:6;4019:7;4016:19;4013:201;;;4089:19;;;4083:26;-1:-1:-1;;4172:1:48;4168:14;;;4184:3;4164:24;4160:37;4156:42;4141:58;4126:74;;4013:201;-1:-1:-1;;;;;4260:1:48;4244:14;;;4240:22;4227:36;;-1:-1:-1;3178:1352:48:o;4879:177::-;1041:6129:23;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "1041:6129:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3876:213;;;;;;:::i;:::-;;:::i;:::-;;2104:444;;;;;;:::i;:::-;;:::i;:::-;;;2000:14:48;;1993:22;1975:41;;1963:2;1948:18;2104:444:23;;;;;;;;6096:98:25;;;:::i;:::-;;;;;;;:::i;7574:200::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;3127:32:48;;;3109:51;;3097:2;3082:18;7574:200:25;2963:203:48;7129:384:25;;;;;;:::i;:::-;;:::i;1111:173:34:-;;;;;;:::i;:::-;;:::i;2249:306:25:-;2508:12;;2302:7;2492:13;:28;2249:306;;;3767:25:48;;;3755:2;3740:18;2249:306:25;3621:177:48;8413:164:25;;;;;;:::i;:::-;;:::i;1255:203:31:-;;;;;;:::i;:::-;;:::i;1399:347:35:-;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;4581:32:48;;;4563:51;;4645:2;4630:18;;4623:34;;;;4536:18;1399:347:35;4389:274:48;5591:104:23;5649:7;5675:13;5591:104;;8643:179:25;;;;;;:::i;:::-;;:::i;5249:87:23:-;;;;;;:::i;:::-;;:::i;5795:357::-;;;;;;:::i;:::-;;:::i;1986:381:35:-;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;4858:32:48;;;4840:51;;4939:6;4927:19;;;4922:2;4907:18;;4900:47;4813:18;1986:381:35;4668:285:48;3065:256:35;;;;;;:::i;:::-;;:::i;5911:123:25:-;;;;;;:::i;:::-;;:::i;958:96:31:-;1032:8;:15;958:96;;3337:203:25;;;;;;:::i;:::-;;:::i;4650:325:23:-;;;;;;:::i;:::-;;:::i;849:86:34:-;922:6;;-1:-1:-1;;;;;922:6:34;849:86;;981:188:32;;;;;;:::i;:::-;;:::i;6258:102:25:-;;;:::i;4259:288:35:-;;;;;;:::i;:::-;;:::i;7841:282:25:-;;;;;;:::i;:::-;;:::i;740:319:33:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2477:144:35:-;2577:16;;-1:-1:-1;;;;;2577:16:35;;;-1:-1:-1;;;2602:10:35;;;;2477:144;;8888:381:25;;;;;;:::i;:::-;;:::i;2962:378:23:-;;;;;;:::i;:::-;;:::i;543:34:32:-;;;:::i;8189:162:25:-;;;;;;:::i;:::-;-1:-1:-1;;;;;8309:25:25;;;8286:4;8309:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;8189:162;3876:213:23;3963:10;:8;:10::i;:::-;3955:46;;;;-1:-1:-1;;;3955:46:23;;9101:2:48;3955:46:23;;;9083:21:48;9140:2;9120:18;;;9113:30;-1:-1:-1;;;9159:18:48;;;9152:53;9222:18;;3955:46:23;;;;;;;;;4042:9;4011:7;:28;4019:19;5649:7;5675:13;;5591:104;4019:19;4011:28;;;;;;;;;;;:40;;;;;;:::i;:::-;;4061:21;4071:3;4076:1;4061:21;;;;;;;;;;;;:9;:21::i;:::-;3876:213;;:::o;2104:444::-;2207:4;-1:-1:-1;;;;;;;;;2242:25:23;;;;:100;;-1:-1:-1;;;;;;;;;;2317:25:23;;;2242:100;:175;;;-1:-1:-1;;;;;;;;;;2392:25:23;;;2242:175;:274;;;-1:-1:-1;;;;;;;2475:41:23;;-1:-1:-1;;;2475:41:23;2242:274;2223:293;2104:444;-1:-1:-1;;2104:444:23:o;6096:98:25:-;6150:13;6182:5;6175:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6096:98;:::o;7574:200::-;7642:7;7666:16;7674:7;7666;:16::i;:::-;7661:64;;7691:34;;-1:-1:-1;;;7691:34:25;;;;;;;;;;;7661:64;-1:-1:-1;7743:24:25;;;;:15;:24;;;;;;-1:-1:-1;;;;;7743:24:25;;7574:200::o;7129:384::-;7201:13;7217:24;7233:7;7217:15;:24::i;:::-;7201:40;;7261:5;-1:-1:-1;;;;;7255:11:25;:2;-1:-1:-1;;;;;7255:11:25;;7251:48;;7275:24;;-1:-1:-1;;;7275:24:25;;;;;;;;;;;7251:48;719:10:45;-1:-1:-1;;;;;7314:21:25;;;7310:158;;7354:37;7371:5;719:10:45;8189:162:25;:::i;7354:37::-;7349:119;;7418:35;;-1:-1:-1;;;7418:35:25;;;;;;;;;;;7349:119;7478:28;7487:2;7491:7;7500:5;7478:8;:28::i;:::-;7191:322;7129:384;;:::o;1111:173:34:-;1181:14;:12;:14::i;:::-;1176:70;;1211:24;;-1:-1:-1;;;1211:24:34;;;;;;;:::i;1176:70::-;1255:22;1267:9;1255:11;:22::i;:::-;1111:173;:::o;8413:164:25:-;8542:28;8552:4;8558:2;8562:7;8542:9;:28::i;1255:203:31:-;1319:7;1352:17;1032:8;:15;;958:96;1352:17;1342:6;:27;1338:81;;1385:23;;-1:-1:-1;;;1385:23:31;;12385:2:48;1385:23:31;;;12367:21:48;12424:2;12404:18;;;12397:30;-1:-1:-1;;;12443:18:48;;;12436:43;12496:18;;1385:23:31;12183:337:48;1338:81:31;1435:8;1444:6;1435:16;;;;;;;;:::i;:::-;;;;;;;;;1428:23;;1255:203;;;:::o;1399:347:35:-;1536:16;1554:21;1592:17;1611:11;1626:31;1649:7;1626:22;:31::i;:::-;1591:66;;-1:-1:-1;1591:66:35;;-1:-1:-1;1591:66:35;;;-1:-1:-1;1733:6:35;1714:15;1591:66;1714:9;:15;:::i;:::-;1713:26;;;;:::i;:::-;1697:42;;1581:165;;1399:347;;;;;:::o;8643:179:25:-;8776:39;8793:4;8799:2;8803:7;8776:39;;;;;;;;;;;;:16;:39::i;5249:87:23:-;5308:21;5314:8;5324:4;5308:5;:21::i;5795:357::-;5920:24;5960:13;5976:17;5984:8;5976:7;:17::i;:::-;5960:33;;6039:5;-1:-1:-1;;;;;6026:18:23;:9;-1:-1:-1;;;;;6026:18:23;;:68;;;-1:-1:-1;;;;;;8309:25:25;;;8286:4;8309:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;6060:34:23;6026:118;;;;6135:9;-1:-1:-1;;;;;6110:34:23;:21;6122:8;6110:11;:21::i;:::-;-1:-1:-1;;;;;6110:34:23;;6026:118;6003:142;5795:357;-1:-1:-1;;;;5795:357:23:o;1986:381:35:-;2066:7;2130:29;;;:19;:29;;;;;;;;2093:66;;;;;;;;;;-1:-1:-1;;;;;2093:66:35;;;;;;;;;;;;;;;;2066:7;;2189:39;:171;;2305:25;;2339:19;;;;2189:171;;;2248:16;;-1:-1:-1;;;;;2248:16:35;;;-1:-1:-1;;;2273:10:35;;;;2189:171;2170:190;;;;;1986:381;;;:::o;3065:256::-;3177:20;:18;:20::i;:::-;3172:76;;3213:24;;-1:-1:-1;;;3213:24:35;;;;;;;:::i;3172:76::-;3258:56;3283:17;3302:11;3258:24;:56::i;5911:123:25:-;5975:7;6001:21;6014:7;6001:12;:21::i;:::-;:26;;5911:123;-1:-1:-1;;5911:123:25:o;3337:203::-;3401:7;-1:-1:-1;;;;;3424:19:25;;3420:60;;3452:28;;-1:-1:-1;;;3452:28:25;;;;;;;;;;;3420:60;-1:-1:-1;;;;;;3505:19:25;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;3505:27:25;;3337:203::o;4650:325:23:-;4818:10;:8;:10::i;:::-;4810:46;;;;-1:-1:-1;;;4810:46:23;;9101:2:48;4810:46:23;;;9083:21:48;9140:2;9120:18;;;9113:30;-1:-1:-1;;;9159:18:48;;;9152:53;9222:18;;4810:46:23;8899:347:48;4810:46:23;4866:60;4885:19;5649:7;5675:13;;5591:104;4885:19;4906:9;4917:8;4866:18;:60::i;:::-;;;4936:32;4946:3;4951:9;4962:5;4936:9;:32::i;:::-;4650:325;;;;:::o;981:188:32:-;1058:20;:18;:20::i;:::-;1053:76;;1094:24;;-1:-1:-1;;;1094:24:32;;;;;;;:::i;1053:76::-;1139:23;1157:4;1139:17;:23::i;6258:102:25:-;6314:13;6346:7;6339:14;;;;;:::i;4259:288:35:-;4406:20;:18;:20::i;:::-;4401:76;;4442:24;;-1:-1:-1;;;4442:24:35;;;;;;;:::i;4401:76::-;4487:53;4513:8;4523:10;4535:4;4487:25;:53::i;7841:282:25:-;719:10:45;-1:-1:-1;;;;;7939:24:25;;;7935:54;;7972:17;;-1:-1:-1;;;7972:17:25;;;;;;;;;;;7935:54;719:10:45;8000:32:25;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;8000:42:25;;;;;;;;;;;;:53;;-1:-1:-1;;8000:53:25;;;;;;;;;;8068:48;;1975:41:48;;;8000:42:25;;719:10:45;8068:48:25;;1948:18:48;8068:48:25;;;;;;;7841:282;;:::o;740:319:33:-;817:22;873:4;-1:-1:-1;;;;;861:24:33;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;851:34;;900:9;895:134;915:15;;;895:134;;;964:54;1003:4;1010;;1015:1;1010:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;964:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;964:30:33;;-1:-1:-1;;;964:54:33:i;:::-;951:7;959:1;951:10;;;;;;;;:::i;:::-;;;;;;:67;;;;932:3;;;;;:::i;:::-;;;;895:134;;;;740:319;;;;:::o;8888:381:25:-;9049:28;9059:4;9065:2;9069:7;9049:9;:28::i;:::-;-1:-1:-1;;;;;9091:13:25;;1467:19:42;:23;9087:176:25;;9125:56;9156:4;9162:2;9166:7;9175:5;9125:30;:56::i;:::-;9120:143;;9208:40;;-1:-1:-1;;;9208:40:25;;;;;;;;;;;2962:378:23;3061:29;3093:17;;;:7;:17;;;;;3061:49;;3036:13;;3061:29;3093:17;3061:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3156:1;3130:15;3124:29;:33;3120:86;;;3180:15;2962:378;-1:-1:-1;;2962:378:23:o;3120:86::-;3216:22;3241:20;3252:8;3241:10;:20::i;:::-;3216:45;;3302:8;3312:19;:8;:17;:19::i;:::-;3285:47;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3271:62;;;;2962:378;;;:::o;543:34:32:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6655:102:23:-;6706:4;6743:7;922:6:34;;-1:-1:-1;;;;;922:6:34;;849:86;6743:7:23;-1:-1:-1;;;;;6729:21:23;:10;-1:-1:-1;;;;;6729:21:23;;6722:28;;6655:102;:::o;10228:1708:25:-;10346:20;10369:13;-1:-1:-1;;;;;10396:16:25;;10392:48;;10421:19;;-1:-1:-1;;;10421:19:25;;;;;;;;;;;10392:48;10454:8;10466:1;10454:13;10450:44;;10476:18;;-1:-1:-1;;;10476:18:25;;;;;;;;;;;10450:44;-1:-1:-1;;;;;10837:16:25;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;10895:49:25;;-1:-1:-1;;;;;10837:44:25;;;;;;;10895:49;;;;-1:-1:-1;;10837:44:25;;;;;;10895:49;;;;;;;;;;;;;;;;10959:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;11008:66:25;;;-1:-1:-1;;;11058:15:25;11008:66;;;;;;;;;;;;;10959:25;;11152:23;;;;1467:19:42;:23;11190:618:25;;11229:308;11259:38;;11284:12;;-1:-1:-1;;;;;11259:38:25;;;11276:1;;-1:-1:-1;;;;;;;;;;;11259:38:25;11276:1;;11259:38;11324:69;11363:1;11367:2;11371:14;;;;;;11387:5;11324:30;:69::i;:::-;11319:172;;11428:40;;-1:-1:-1;;;11428:40:25;;;;;;;;;;;11319:172;11532:3;11517:12;:18;11229:308;;11616:12;11599:13;;:29;11595:43;;11630:8;;;11595:43;11190:618;;;11677:117;11707:40;;11732:14;;;;;-1:-1:-1;;;;;11707:40:25;;;11724:1;;-1:-1:-1;;;;;;;;;;;11707:40:25;11724:1;;11707:40;11789:3;11774:12;:18;11677:117;;11190:618;-1:-1:-1;11821:13:25;:28;;;11869:60;;11902:2;11906:12;11920:8;11869:60;:::i;9515:172::-;9572:4;9635:13;;9625:7;:23;9595:85;;;;-1:-1:-1;;9653:20:25;;;;:11;:20;;;;;:27;-1:-1:-1;;;9653:27:25;;;;9652:28;;9515:172::o;18496:189::-;18606:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;18606:29:25;-1:-1:-1;;;;;18606:29:25;;;;;;;;;18650:28;;18606:24;;18650:28;;;;;;;18496:189;;;:::o;1399:172:34:-;1479:6;;;-1:-1:-1;;;;;1495:18:34;;;-1:-1:-1;;;;;;1495:18:34;;;;;;;1529:35;;1479:6;;;1495:18;1479:6;;1529:35;;1458:18;;1529:35;1448:123;1399:172;:::o;13571:2082:25:-;13681:35;13719:21;13732:7;13719:12;:21::i;:::-;13681:59;;13777:4;-1:-1:-1;;;;;13755:26:25;:13;:18;;;-1:-1:-1;;;;;13755:26:25;;13751:67;;13790:28;;-1:-1:-1;;;13790:28:25;;;;;;;;;;;13751:67;13829:22;719:10:45;-1:-1:-1;;;;;13855:20:25;;;;:72;;-1:-1:-1;13891:36:25;13908:4;719:10:45;8189:162:25;:::i;13891:36::-;13855:124;;;-1:-1:-1;719:10:45;13943:20:25;13955:7;13943:11;:20::i;:::-;-1:-1:-1;;;;;13943:36:25;;13855:124;13829:151;;13996:17;13991:66;;14022:35;;-1:-1:-1;;;14022:35:25;;;;;;;;;;;13991:66;-1:-1:-1;;;;;14071:16:25;;14067:52;;14096:23;;-1:-1:-1;;;14096:23:25;;;;;;;;;;;14067:52;14235:35;14252:1;14256:7;14265:4;14235:8;:35::i;:::-;-1:-1:-1;;;;;14560:18:25;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;14560:31:25;;;-1:-1:-1;;;;;14560:31:25;;;-1:-1:-1;;14560:31:25;;;;;;;14605:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;14605:29:25;;;;;;;;;;;14683:20;;;:11;:20;;;;;;14717:18;;-1:-1:-1;;;;;;14749:49:25;;;;-1:-1:-1;;;14782:15:25;14749:49;;;;;;;;;;15068:11;;15127:24;;;;;15169:13;;14683:20;;15127:24;;15169:13;15165:377;;15376:13;;15361:11;:28;15357:171;;15413:20;;15481:28;;;;-1:-1:-1;;;;;15455:54:25;-1:-1:-1;;;15455:54:25;-1:-1:-1;;;;;;15455:54:25;;;-1:-1:-1;;;;;15413:20:25;;15455:54;;;;15357:171;14536:1016;;;15586:7;15582:2;-1:-1:-1;;;;;15567:27:25;15576:4;-1:-1:-1;;;;;15567:27:25;-1:-1:-1;;;;;;;;;;;15567:27:25;;;;;;;;;13671:1982;;13571:2082;;;:::o;16030:2355::-;16109:35;16147:21;16160:7;16147:12;:21::i;:::-;16194:18;;16109:59;;-1:-1:-1;16223:284:25;;;;16256:22;719:10:45;-1:-1:-1;;;;;16282:20:25;;;;:76;;-1:-1:-1;16322:36:25;16339:4;719:10:45;8189:162:25;:::i;16322:36::-;16282:132;;;-1:-1:-1;719:10:45;16378:20:25;16390:7;16378:11;:20::i;:::-;-1:-1:-1;;;;;16378:36:25;;16282:132;16256:159;;16435:17;16430:66;;16461:35;;-1:-1:-1;;;16461:35:25;;;;;;;;;;;16430:66;16242:265;16223:284;16630:35;16647:1;16651:7;16660:4;16630:8;:35::i;:::-;-1:-1:-1;;;;;16989:18:25;;;16955:31;16989:18;;;:12;:18;;;;;;;;17021:24;;-1:-1:-1;;;;;;;;;;17021:24:25;;;;;;;;;-1:-1:-1;;17021:24:25;;;;17059:29;;;;;17044:1;17059:29;;;;;;;;-1:-1:-1;;17059:29:25;;;;;;;;;;17218:20;;;:11;:20;;;;;;17252;;-1:-1:-1;;;;17319:15:25;17286:49;;;-1:-1:-1;;;17286:49:25;-1:-1:-1;;;;;;17286:49:25;;;;;;;;;;17349:22;-1:-1:-1;;;17349:22:25;;;17637:11;;;17696:24;;;;;17738:13;;16989:18;;17696:24;;17738:13;17734:377;;17945:13;;17930:11;:28;17926:171;;17982:20;;18050:28;;;;-1:-1:-1;;;;;18024:54:25;-1:-1:-1;;;18024:54:25;-1:-1:-1;;;;;;18024:54:25;;;-1:-1:-1;;;;;17982:20:25;;18024:54;;;;17926:171;-1:-1:-1;;18136:35:25;;18163:7;;-1:-1:-1;18159:1:25;;-1:-1:-1;;;;;;18136:35:25;;;-1:-1:-1;;;;;;;;;;;18136:35:25;18159:1;;18136:35;-1:-1:-1;;18354:12:25;:14;;;;;;-1:-1:-1;;16030:2355:25:o;3408:334:35:-;3527:6;3513:11;:20;3509:76;;;3549:25;;-1:-1:-1;;;3549:25:35;;14562:2:48;3549:25:35;;;14544:21:48;14601:2;14581:18;;;14574:30;-1:-1:-1;;;14620:18:48;;;14613:45;14675:18;;3549:25:35;14360:339:48;3509:76:35;3595:16;:36;;-1:-1:-1;;;;;3595:36:35;;-1:-1:-1;;;;;;3641:32:35;;;;;-1:-1:-1;;;3641:32:35;;;;;;;;3689:46;;3767:25:48;;;3689:46:35;;3755:2:48;3740:18;3689:46:35;;;;;;;3408:334;;:::o;4680:1174:25:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;4790:7:25;4888:13;;4881:4;:20;4877:913;;;4925:31;4959:17;;;:11;:17;;;;;;;;;4925:51;;;;;;;;;-1:-1:-1;;;;;4925:51:25;;;;-1:-1:-1;;;4925:51:25;;-1:-1:-1;;;;;4925:51:25;;;;;;;;-1:-1:-1;;;4925:51:25;;;;;;;;;;;;;;4998:774;;5051:14;;-1:-1:-1;;;;;5051:28:25;;5047:107;;5118:9;4680:1174;-1:-1:-1;;;4680:1174:25:o;5047:107::-;-1:-1:-1;;;5514:6:25;5562:17;;;;:11;:17;;;;;;;;;5550:29;;;;;;;;;-1:-1:-1;;;;;5550:29:25;;;;;-1:-1:-1;;;5550:29:25;;-1:-1:-1;;;;;5550:29:25;;;;;;;;-1:-1:-1;;;5550:29:25;;;;;;;;;;;;;5613:28;5609:115;;5684:9;4680:1174;-1:-1:-1;;;4680:1174:25:o;5609:115::-;5471:279;;;4903:887;4877:913;5816:31;;-1:-1:-1;;;5816:31:25;;;;;;;;;;;2816:362:31;2966:25;;3030:24;3041:13;3030:8;:24;:::i;:::-;3102:8;:22;;;;;;;;;;;;;-1:-1:-1;3135:16:31;;;:7;3102:22;3135:16;;;;3020:34;;-1:-1:-1;3020:34:31;;-1:-1:-1;3135:36:31;3154:17;3135:16;:36;:::i;:::-;;2816:362;;;;;;:::o;1251:185:32:-;1317:21;1341:11;1317:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1376:4;1362:11;:18;;;;;;:::i;:::-;;1396:33;1415:7;1424:4;1396:33;;;;;;;:::i;:::-;;;;;;;;1307:129;1251:185;:::o;4649:362:35:-;4796:6;4789:4;:13;4785:69;;;4818:25;;-1:-1:-1;;;4818:25:35;;14562:2:48;4818:25:35;;;14544:21:48;14601:2;14581:18;;;14574:30;-1:-1:-1;;;14620:18:48;;;14613:45;14675:18;;4818:25:35;14360:339:48;4785:69:35;4896:49;;;;;;;;-1:-1:-1;;;;;4896:49:35;;;;;;;;;;;;;-1:-1:-1;4864:29:35;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4864:81:35;;;;;;;;;;;-1:-1:-1;4864:81:35;;;;;;;4961:43;;3767:25:48;;;4896:49:35;;4864:29;;4961:43;;3740:18:48;4961:43:35;;;;;;;4649:362;;;:::o;6578:198:42:-;6661:12;6692:77;6713:6;6721:4;6692:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6685:84;6578:198;-1:-1:-1;;;6578:198:42:o;19166:650:25:-;19344:72;;-1:-1:-1;;;19344:72:25;;19324:4;;-1:-1:-1;;;;;19344:36:25;;;;;:72;;719:10:45;;19395:4:25;;19401:7;;19410:5;;19344:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19344:72:25;;;;;;;;-1:-1:-1;;19344:72:25;;;;;;;;;;;;:::i;:::-;;;19340:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19575:6;:13;19592:1;19575:18;19571:229;;19620:40;;-1:-1:-1;;;19620:40:25;;;;;;;;;;;19571:229;19760:6;19754:13;19745:6;19741:2;19737:15;19730:38;19340:470;-1:-1:-1;;;;;;19462:55:25;-1:-1:-1;;;19462:55:25;;-1:-1:-1;19166:650:25;;;;;;:::o;2130:389:31:-;2191:13;2216:25;2244:17;1032:8;:15;;958:96;2244:17;2216:45;;2271:24;2298:8;2271:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2322:9;2317:161;2341:17;2337:1;:21;2317:161;;;2397:7;2405:1;2397:10;;;;;;;;:::i;:::-;;;;;;;2386:8;:21;2382:86;;;2434:7;:19;2442:7;2450:1;2442:10;;;;;;;;:::i;:::-;;;;;;;2434:19;;;;;;;;;;;2427:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2130:389;;;:::o;2382:86::-;2360:6;2365:1;2360:6;;:::i;:::-;;;2317:161;;;-1:-1:-1;2487:25:31;;-1:-1:-1;;;2487:25:31;;16175:2:48;2487:25:31;;;16157:21:48;16214:2;16194:18;;;16187:30;-1:-1:-1;;;16233:18:48;;;16226:45;16288:18;;2487:25:31;15973:339:48;330:703:43;386:13;603:5;612:1;603:10;599:51;;-1:-1:-1;;629:10:43;;;;;;;;;;;;-1:-1:-1;;;629:10:43;;;;;330:703::o;599:51::-;674:5;659:12;713:75;720:9;;713:75;;745:8;;;;:::i;:::-;;-1:-1:-1;767:10:43;;-1:-1:-1;775:2:43;767:10;;:::i;:::-;;;713:75;;;797:19;829:6;-1:-1:-1;;;;;819:17:43;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;819:17:43;;797:39;;846:150;853:10;;846:150;;879:11;889:1;879:11;;:::i;:::-;;-1:-1:-1;947:10:43;955:2;947:5;:10;:::i;:::-;934:24;;:2;:24;:::i;:::-;921:39;;904:6;911;904:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;904:56:43;;;;;;;;-1:-1:-1;974:11:43;983:2;974:11;;:::i;:::-;;;846:150;;6962:387:42;7103:12;-1:-1:-1;;;;;1467:19:42;;;7127:69;;;;-1:-1:-1;;;7127:69:42;;16766:2:48;7127:69:42;;;16748:21:48;16805:2;16785:18;;;16778:30;16844:34;16824:18;;;16817:62;-1:-1:-1;;;16895:18:48;;;16888:36;16941:19;;7127:69:42;16564:402:48;7127:69:42;7208:12;7222:23;7249:6;-1:-1:-1;;;;;7249:19:42;7269:4;7249:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7207:67;;;;7291:51;7308:7;7317:10;7329:12;7291:16;:51::i;:::-;7284:58;6962:387;-1:-1:-1;;;;;;6962:387:42:o;7569:692::-;7715:12;7743:7;7739:516;;;-1:-1:-1;7773:10:42;7766:17;;7739:516;7884:17;;:21;7880:365;;8078:10;8072:17;8138:15;8125:10;8121:2;8117:19;8110:44;7880:365;8217:12;8210:20;;-1:-1:-1;;;8210:20:42;;;;;;;;:::i;14:173:48:-;82:20;;-1:-1:-1;;;;;131:31:48;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:127::-;253:10;248:3;244:20;241:1;234:31;284:4;281:1;274:15;308:4;305:1;298:15;324:719;367:5;420:3;413:4;405:6;401:17;397:27;387:55;;438:1;435;428:12;387:55;474:6;461:20;-1:-1:-1;;;;;537:2:48;533;530:10;527:36;;;543:18;;:::i;:::-;618:2;612:9;586:2;672:13;;-1:-1:-1;;668:22:48;;;692:2;664:31;660:40;648:53;;;716:18;;;736:22;;;713:46;710:72;;;762:18;;:::i;:::-;802:10;798:2;791:22;837:2;829:6;822:18;883:3;876:4;871:2;863:6;859:15;855:26;852:35;849:55;;;900:1;897;890:12;849:55;964:2;957:4;949:6;945:17;938:4;930:6;926:17;913:54;1011:1;1004:4;999:2;991:6;987:15;983:26;976:37;1031:6;1022:15;;;;;;324:719;;;;:::o;1048:396::-;1126:6;1134;1187:2;1175:9;1166:7;1162:23;1158:32;1155:52;;;1203:1;1200;1193:12;1155:52;1226:29;1245:9;1226:29;:::i;:::-;1216:39;;1306:2;1295:9;1291:18;1278:32;-1:-1:-1;;;;;1325:6:48;1322:30;1319:50;;;1365:1;1362;1355:12;1319:50;1388;1430:7;1421:6;1410:9;1406:22;1388:50;:::i;:::-;1378:60;;;1048:396;;;;;:::o;1449:131::-;-1:-1:-1;;;;;;1523:32:48;;1513:43;;1503:71;;1570:1;1567;1560:12;1585:245;1643:6;1696:2;1684:9;1675:7;1671:23;1667:32;1664:52;;;1712:1;1709;1702:12;1664:52;1751:9;1738:23;1770:30;1794:5;1770:30;:::i;2027:258::-;2099:1;2109:113;2123:6;2120:1;2117:13;2109:113;;;2199:11;;;2193:18;2180:11;;;2173:39;2145:2;2138:10;2109:113;;;2240:6;2237:1;2234:13;2231:48;;;-1:-1:-1;;2275:1:48;2257:16;;2250:27;2027:258::o;2290:::-;2332:3;2370:5;2364:12;2397:6;2392:3;2385:19;2413:63;2469:6;2462:4;2457:3;2453:14;2446:4;2439:5;2435:16;2413:63;:::i;:::-;2530:2;2509:15;-1:-1:-1;;2505:29:48;2496:39;;;;2537:4;2492:50;;2290:258;-1:-1:-1;;2290:258:48:o;2553:220::-;2702:2;2691:9;2684:21;2665:4;2722:45;2763:2;2752:9;2748:18;2740:6;2722:45;:::i;2778:180::-;2837:6;2890:2;2878:9;2869:7;2865:23;2861:32;2858:52;;;2906:1;2903;2896:12;2858:52;-1:-1:-1;2929:23:48;;2778:180;-1:-1:-1;2778:180:48:o;3171:254::-;3239:6;3247;3300:2;3288:9;3279:7;3275:23;3271:32;3268:52;;;3316:1;3313;3306:12;3268:52;3339:29;3358:9;3339:29;:::i;:::-;3329:39;3415:2;3400:18;;;;3387:32;;-1:-1:-1;;;3171:254:48:o;3430:186::-;3489:6;3542:2;3530:9;3521:7;3517:23;3513:32;3510:52;;;3558:1;3555;3548:12;3510:52;3581:29;3600:9;3581:29;:::i;3803:328::-;3880:6;3888;3896;3949:2;3937:9;3928:7;3924:23;3920:32;3917:52;;;3965:1;3962;3955:12;3917:52;3988:29;4007:9;3988:29;:::i;:::-;3978:39;;4036:38;4070:2;4059:9;4055:18;4036:38;:::i;:::-;4026:48;;4121:2;4110:9;4106:18;4093:32;4083:42;;3803:328;;;;;:::o;4136:248::-;4204:6;4212;4265:2;4253:9;4244:7;4240:23;4236:32;4233:52;;;4281:1;4278;4271:12;4233:52;-1:-1:-1;;4304:23:48;;;4374:2;4359:18;;;4346:32;;-1:-1:-1;4136:248:48:o;4958:685::-;5063:6;5071;5079;5087;5140:3;5128:9;5119:7;5115:23;5111:33;5108:53;;;5157:1;5154;5147:12;5108:53;5180:29;5199:9;5180:29;:::i;:::-;5170:39;;5256:2;5245:9;5241:18;5228:32;5218:42;;5311:2;5300:9;5296:18;5283:32;-1:-1:-1;;;;;5375:2:48;5367:6;5364:14;5361:34;;;5391:1;5388;5381:12;5361:34;5414:50;5456:7;5447:6;5436:9;5432:22;5414:50;:::i;:::-;5404:60;;5517:2;5506:9;5502:18;5489:32;5473:48;;5546:2;5536:8;5533:16;5530:36;;;5562:1;5559;5552:12;5530:36;;5585:52;5629:7;5618:8;5607:9;5603:24;5585:52;:::i;:::-;5575:62;;;4958:685;;;;;;;:::o;5648:322::-;5717:6;5770:2;5758:9;5749:7;5745:23;5741:32;5738:52;;;5786:1;5783;5776:12;5738:52;5826:9;5813:23;-1:-1:-1;;;;;5851:6:48;5848:30;5845:50;;;5891:1;5888;5881:12;5845:50;5914;5956:7;5947:6;5936:9;5932:22;5914:50;:::i;5975:322::-;6052:6;6060;6068;6121:2;6109:9;6100:7;6096:23;6092:32;6089:52;;;6137:1;6134;6127:12;6089:52;6173:9;6160:23;6150:33;;6202:38;6236:2;6225:9;6221:18;6202:38;:::i;6302:347::-;6367:6;6375;6428:2;6416:9;6407:7;6403:23;6399:32;6396:52;;;6444:1;6441;6434:12;6396:52;6467:29;6486:9;6467:29;:::i;:::-;6457:39;;6546:2;6535:9;6531:18;6518:32;6593:5;6586:13;6579:21;6572:5;6569:32;6559:60;;6615:1;6612;6605:12;6559:60;6638:5;6628:15;;;6302:347;;;;;:::o;6654:626::-;6751:6;6759;6812:2;6800:9;6791:7;6787:23;6783:32;6780:52;;;6828:1;6825;6818:12;6780:52;6868:9;6855:23;-1:-1:-1;;;;;6938:2:48;6930:6;6927:14;6924:34;;;6954:1;6951;6944:12;6924:34;6992:6;6981:9;6977:22;6967:32;;7037:7;7030:4;7026:2;7022:13;7018:27;7008:55;;7059:1;7056;7049:12;7008:55;7099:2;7086:16;7125:2;7117:6;7114:14;7111:34;;;7141:1;7138;7131:12;7111:34;7194:7;7189:2;7179:6;7176:1;7172:14;7168:2;7164:23;7160:32;7157:45;7154:65;;;7215:1;7212;7205:12;7154:65;7246:2;7238:11;;;;;7268:6;;-1:-1:-1;6654:626:48;;-1:-1:-1;;;;6654:626:48:o;7285:801::-;7445:4;7474:2;7514;7503:9;7499:18;7544:2;7533:9;7526:21;7567:6;7602;7596:13;7633:6;7625;7618:22;7671:2;7660:9;7656:18;7649:25;;7733:2;7723:6;7720:1;7716:14;7705:9;7701:30;7697:39;7683:53;;7771:2;7763:6;7759:15;7792:1;7802:255;7816:6;7813:1;7810:13;7802:255;;;7909:2;7905:7;7893:9;7885:6;7881:22;7877:36;7872:3;7865:49;7937:40;7970:6;7961;7955:13;7937:40;:::i;:::-;7927:50;-1:-1:-1;8035:12:48;;;;8000:15;;;;7838:1;7831:9;7802:255;;;-1:-1:-1;8074:6:48;;7285:801;-1:-1:-1;;;;;;;7285:801:48:o;8091:538::-;8186:6;8194;8202;8210;8263:3;8251:9;8242:7;8238:23;8234:33;8231:53;;;8280:1;8277;8270:12;8231:53;8303:29;8322:9;8303:29;:::i;:::-;8293:39;;8351:38;8385:2;8374:9;8370:18;8351:38;:::i;:::-;8341:48;;8436:2;8425:9;8421:18;8408:32;8398:42;;8491:2;8480:9;8476:18;8463:32;-1:-1:-1;;;;;8510:6:48;8507:30;8504:50;;;8550:1;8547;8540:12;8504:50;8573;8615:7;8606:6;8595:9;8591:22;8573:50;:::i;8634:260::-;8702:6;8710;8763:2;8751:9;8742:7;8738:23;8734:32;8731:52;;;8779:1;8776;8769:12;8731:52;8802:29;8821:9;8802:29;:::i;:::-;8792:39;;8850:38;8884:2;8873:9;8869:18;8850:38;:::i;:::-;8840:48;;8634:260;;;;;:::o;9251:380::-;9330:1;9326:12;;;;9373;;;9394:61;;9448:4;9440:6;9436:17;9426:27;;9394:61;9501:2;9493:6;9490:14;9470:18;9467:38;9464:161;;9547:10;9542:3;9538:20;9535:1;9528:31;9582:4;9579:1;9572:15;9610:4;9607:1;9600:15;9464:161;;9251:380;;;:::o;9762:545::-;9864:2;9859:3;9856:11;9853:448;;;9900:1;9925:5;9921:2;9914:17;9970:4;9966:2;9956:19;10040:2;10028:10;10024:19;10021:1;10017:27;10011:4;10007:38;10076:4;10064:10;10061:20;10058:47;;;-1:-1:-1;10099:4:48;10058:47;10154:2;10149:3;10145:12;10142:1;10138:20;10132:4;10128:31;10118:41;;10209:82;10227:2;10220:5;10217:13;10209:82;;;10272:17;;;10253:1;10242:13;10209:82;;;10213:3;;;9762:545;;;:::o;10483:1352::-;10609:3;10603:10;-1:-1:-1;;;;;10628:6:48;10625:30;10622:56;;;10658:18;;:::i;:::-;10687:97;10777:6;10737:38;10769:4;10763:11;10737:38;:::i;:::-;10731:4;10687:97;:::i;:::-;10839:4;;10903:2;10892:14;;10920:1;10915:663;;;;11622:1;11639:6;11636:89;;;-1:-1:-1;11691:19:48;;;11685:26;11636:89;-1:-1:-1;;10440:1:48;10436:11;;;10432:24;10428:29;10418:40;10464:1;10460:11;;;10415:57;11738:81;;10885:944;;10915:663;9709:1;9702:14;;;9746:4;9733:18;;-1:-1:-1;;10951:20:48;;;11069:236;11083:7;11080:1;11077:14;11069:236;;;11172:19;;;11166:26;11151:42;;11264:27;;;;11232:1;11220:14;;;;11099:19;;11069:236;;;11073:3;11333:6;11324:7;11321:19;11318:201;;;11394:19;;;11388:26;-1:-1:-1;;11477:1:48;11473:14;;;11489:3;11469:24;11465:37;11461:42;11446:58;11431:74;;11318:201;-1:-1:-1;;;;;11565:1:48;11549:14;;;11545:22;11532:36;;-1:-1:-1;10483:1352:48:o;11840:338::-;12042:2;12024:21;;;12081:2;12061:18;;;12054:30;-1:-1:-1;;;12115:2:48;12100:18;;12093:44;12169:2;12154:18;;11840:338::o;12525:127::-;12586:10;12581:3;12577:20;12574:1;12567:31;12617:4;12614:1;12607:15;12641:4;12638:1;12631:15;12657:127;12718:10;12713:3;12709:20;12706:1;12699:31;12749:4;12746:1;12739:15;12773:4;12770:1;12763:15;12789:168;12829:7;12895:1;12891;12887:6;12883:14;12880:1;12877:21;12872:1;12865:9;12858:17;12854:45;12851:71;;;12902:18;;:::i;:::-;-1:-1:-1;12942:9:48;;12789:168::o;12962:127::-;13023:10;13018:3;13014:20;13011:1;13004:31;13054:4;13051:1;13044:15;13078:4;13075:1;13068:15;13094:120;13134:1;13160;13150:35;;13165:18;;:::i;:::-;-1:-1:-1;13199:9:48;;13094:120::o;13219:521::-;13296:4;13302:6;13362:11;13349:25;13456:2;13452:7;13441:8;13425:14;13421:29;13417:43;13397:18;13393:68;13383:96;;13475:1;13472;13465:12;13383:96;13502:33;;13554:20;;;-1:-1:-1;;;;;;13586:30:48;;13583:50;;;13629:1;13626;13619:12;13583:50;13662:4;13650:17;;-1:-1:-1;13693:14:48;13689:27;;;13679:38;;13676:58;;;13730:1;13727;13720:12;13676:58;13219:521;;;;;:::o;13745:135::-;13784:3;13805:17;;;13802:43;;13825:18;;:::i;:::-;-1:-1:-1;13872:1:48;13861:13;;13745:135::o;13885:470::-;14064:3;14102:6;14096:13;14118:53;14164:6;14159:3;14152:4;14144:6;14140:17;14118:53;:::i;:::-;14234:13;;14193:16;;;;14256:57;14234:13;14193:16;14290:4;14278:17;;14256:57;:::i;:::-;14329:20;;13885:470;-1:-1:-1;;;;13885:470:48:o;14704:128::-;14744:3;14775:1;14771:6;14768:1;14765:13;14762:39;;;14781:18;;:::i;:::-;-1:-1:-1;14817:9:48;;14704:128::o;14837:383::-;15034:2;15023:9;15016:21;14997:4;15060:45;15101:2;15090:9;15086:18;15078:6;15060:45;:::i;:::-;15153:9;15145:6;15141:22;15136:2;15125:9;15121:18;15114:50;15181:33;15207:6;15199;15181:33;:::i;:::-;15173:41;14837:383;-1:-1:-1;;;;;14837:383:48:o;15225:489::-;-1:-1:-1;;;;;15494:15:48;;;15476:34;;15546:15;;15541:2;15526:18;;15519:43;15593:2;15578:18;;15571:34;;;15641:3;15636:2;15621:18;;15614:31;;;15419:4;;15662:46;;15688:19;;15680:6;15662:46;:::i;15719:249::-;15788:6;15841:2;15829:9;15820:7;15816:23;15812:32;15809:52;;;15857:1;15854;15847:12;15809:52;15889:9;15883:16;15908:30;15932:5;15908:30;:::i;16317:125::-;16357:4;16385:1;16382;16379:8;16376:34;;;16390:18;;:::i;:::-;-1:-1:-1;16427:9:48;;16317:125::o;16447:112::-;16479:1;16505;16495:35;;16510:18;;:::i;:::-;-1:-1:-1;16544:9:48;;16447:112::o;16971:274::-;17100:3;17138:6;17132:13;17154:53;17200:6;17195:3;17188:4;17180:6;17176:17;17154:53;:::i;:::-;17223:16;;;;;16971:274;-1:-1:-1;;16971:274:48:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "batchMintTo(address,uint256,string,bytes)": "754a81d9",
    "burn(uint256)": "42966c68",
    "contractURI()": "e8a3d485",
    "getApproved(uint256)": "081812fc",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isApprovedOrOwner(address,uint256)": "430c2081",
    "mintTo(address,string)": "0075a317",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToMint()": "3b1475a7",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "totalSupply()": "18160ddd",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchMintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApprovedOrOwnerOf\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchMintTo(address,uint256,string,bytes)\":{\"details\":\"The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\",\"params\":{\"_baseURI\":\"The baseURI for the `n` number of NFTs minted. The metadata for each NFT is `baseURI/tokenId`\",\"_data\":\"Additional data to pass along during the minting of the NFT.\",\"_quantity\":\"The number of NFTs to mint.\",\"_to\":\"The recipient of the NFT to mint.\"}},\"burn(uint256)\":{\"details\":\"ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\",\"params\":{\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"ID of a token.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintTo(address,string)\":{\"details\":\"The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\",\"params\":{\"_to\":\"The recipient of the NFT to mint.\",\"_tokenURI\":\"The full metadata URI for the NFT minted.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See `BatchMintMetadata` for handling of metadata in this contract.\",\"params\":{\"_tokenId\":\"The tokenId of an NFT.\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"batchMintTo(address,uint256,string,bytes)\":{\"notice\":\"Lets an authorized address mint multiple NFTs at once to a recipient.\"},\"burn(uint256)\":{\"notice\":\"Lets an owner or approved operator burn the NFT of the given tokenId.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens the given tokenId belongs to.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"isApprovedOrOwner(address,uint256)\":{\"notice\":\"Returns whether a given address is the owner, or approved to transfer an NFT.\"},\"mintTo(address,string)\":{\"notice\":\"Lets an authorized address mint an NFT to a recipient.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the metadata URI for an NFT.\"}},\"notice\":\"The `ERC721Base` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.  It includes the following additions to standard ERC721 logic:      - Ability to mint NFTs via the provided `mint` function.      - Contract metadata for royalty support on platforms such as OpenSea that use        off-chain information to distribute roaylties.      - Ownership of the contract, with the ability to restrict certain functions to        only be called by the contract's owner.      - Multicall capability to perform multiple actions atomically      - EIP 2981 compliance for royalty support on NFT marketplaces.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@thirdweb-dev/contracts/base/ERC721Base.sol\":\"ERC721Base\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@ensdomains/=node_modules/@ensdomains/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@thirdweb-dev/=node_modules/@thirdweb-dev/\",\":contracts/=contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":script/=script/\",\":test/=test/\"]},\"sources\":{\"node_modules/@thirdweb-dev/contracts/base/ERC721Base.sol\":{\"keccak256\":\"0xa153404168b3ee0a4b2118874af998930a47e07335f4e88ba00e3e8c8f42746a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://0a9ebacdecae455e4e09cf1a211b49622571e29e735e673dbc63314d2069a6c4\",\"dweb:/ipfs/QmTG6HKFeFuEqREimUy3S7kjsKS5UR71ZSnkYpbmXTwa14\"]},\"node_modules/@thirdweb-dev/contracts/eip/ERC165.sol\":{\"keccak256\":\"0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c\",\"dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr\"]},\"node_modules/@thirdweb-dev/contracts/eip/ERC721A.sol\":{\"keccak256\":\"0xdc52fd42f02f5f3d146c729d7faf6b1d187201c14206c771bc98c8b531310735\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b89cef38a612ba229a7abef739ee03204676552a785449bc4ca517b4a37a076\",\"dweb:/ipfs/QmezgY1F5A6Mp3GuxRtD93ErKaEJJTdS192UzFokvsKeZM\"]},\"node_modules/@thirdweb-dev/contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"node_modules/@thirdweb-dev/contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf\",\"dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He\"]},\"node_modules/@thirdweb-dev/contracts/eip/interface/IERC721.sol\":{\"keccak256\":\"0xbd9f2dd131e8f1e4e50b1b116eae917510ab9bf5d4356de37c5daf4cffdfa049\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ac3530b317083464271b100de1976ed9179b9e7d5a4fc3d992c61c80676a676\",\"dweb:/ipfs/QmUq1AVzymvp7Y8H1eypGEGU4icjzn5vDSvKMNpXnoaeMT\"]},\"node_modules/@thirdweb-dev/contracts/eip/interface/IERC721A.sol\":{\"keccak256\":\"0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8\",\"dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5\"]},\"node_modules/@thirdweb-dev/contracts/eip/interface/IERC721Metadata.sol\":{\"keccak256\":\"0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e\",\"dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4\"]},\"node_modules/@thirdweb-dev/contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0x8a6253c2ed20a78864aa309d416b3cb264c67aaccca2416787c2fb419bef7beb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://f10a9d0ca8c8cf62e19f1de27e5f4716e8ad96497f26238bc403aff134c5d2d8\",\"dweb:/ipfs/QmTihBeEHfWwbYs2Vu7ZSzLhGimXVAFthzyBoP4nXgmThM\"]},\"node_modules/@thirdweb-dev/contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0x2d178fb7a7513ab61704f2a2d872e9a7d022b10b7844c623c70c83f308bae93d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ab93cfd587cdf3b5b65a3e9fd6f54b71780fc8493cae0ddca66fd62c885cb400\",\"dweb:/ipfs/QmPXVxwppDnz9pNVKx83vNGKxpoGxA7dYyveWSjEMbP2xH\"]},\"node_modules/@thirdweb-dev/contracts/extension/Multicall.sol\":{\"keccak256\":\"0x6b01a01f258774dca807d9902cdfd956895c65b09d931c0b88df97a1086ee504\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cda6ed9746e93537a4e9ae705a0166247cb5ba9b375b68f96fe8612f79e0609c\",\"dweb:/ipfs/QmY1j68ozowaViXDnDtYK64vWsLH3PYMUxKxGqEgsfYh6m\"]},\"node_modules/@thirdweb-dev/contracts/extension/Ownable.sol\":{\"keccak256\":\"0xefa70fe6dac75f78d2ef3b4745aa638af9ec925a1b44013cf029e450ef95023d\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://16f69e428b9ed7281b918264b5d72402d9f316836c5ff5cbf9e6a976a6cd275c\",\"dweb:/ipfs/QmTcc5qghCVpfsDcv21PQzfzMDRdNRu4kD5L9WeBR1CGWr\"]},\"node_modules/@thirdweb-dev/contracts/extension/Royalty.sol\":{\"keccak256\":\"0x40ad6d59529523d35fecaf949f145ba1c3af225f809cc133765b593fb7d83321\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://65274cf0811d385ff9c4d6416f247f55ee7694a08910725ee8c0dba1d3c90a19\",\"dweb:/ipfs/QmNXWqHbsGoADXURj2HdJcqjZJY8VvbGLNG8dS9gV2C1Xh\"]},\"node_modules/@thirdweb-dev/contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x72afb65f99429230a9d6ca7734853cf8c53264d0d013f1bff3a5625396ee1ff1\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://8de0d8da22da658225705129bde46f3d18dc511dd300906ca457f04806f200b0\",\"dweb:/ipfs/QmWbTpgvQz3mE4RiBBcHhKJENroMD1ACMeKDECcyuanCvC\"]},\"node_modules/@thirdweb-dev/contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0x78589586f039d77c94a346b8d1fc3e4bf14ef7d4dc3f51c75b18fd04b79433ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://377f057fd9f89c4eca439d37f9188e4275e7e558fbc06c9d64f6f30bc90cf921\",\"dweb:/ipfs/QmfKRmLuffQNZmt5UyP9xa2oa9TKvphNvKnsfkg4Jzd1Ag\"]},\"node_modules/@thirdweb-dev/contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xa1195f8a222f99add4d594e6a1fa4c3ac36b9ef65378dbe1151eec24fa4d2ec0\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://20e7e62207e61848cbeed4439bd6366b72b3f5dad420fe65f777f3618e718294\",\"dweb:/ipfs/QmPRzBPce3FmPCmMDSzCPzNvViAYo9rD182Mkuequt2L5a\"]},\"node_modules/@thirdweb-dev/contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x82cd77453b9200c541910ac0f72be940dfa96552029550f304ccbf149d950020\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://6fc450122af8f6669e2949c3cbfca1a56f5405520c7652dd7f236f172f2a5241\",\"dweb:/ipfs/QmUQaHNahCR9VPF6iwqJ4kFkW9JsHdzWGvBHhpUrqy3Urn\"]},\"node_modules/@thirdweb-dev/contracts/lib/TWAddress.sol\":{\"keccak256\":\"0x4546bc7fd7332d33610063ea1c7e8cde8528ac31fa6f49e25d92777d937def4f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://848840b707dbf66a1e8a383652eee426aff9814f06ef01e82800ed9799b2278a\",\"dweb:/ipfs/QmTeYtUEEsZvCpeqfEpkWqP2Kqb7QWS1tSfzRgeSUeFbAx\"]},\"node_modules/@thirdweb-dev/contracts/lib/TWStrings.sol\":{\"keccak256\":\"0x7cc7fcf5ab662a5d0b179371ca056e67f4a998c49379ff2cbd7bd91609ebb401\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a679fcdf635a741c27d4e52b1f865bcdc44e54866a89db08239d72dfa48fe7f6\",\"dweb:/ipfs/QmaKKiFma4EpnDt7UmAYRuRmb2cxLBMJ7ik1zsuJHkzmVU\"]},\"node_modules/@thirdweb-dev/contracts/openzeppelin-presets/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"node_modules/@thirdweb-dev/contracts/openzeppelin-presets/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalToCurrentOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApproveToCaller"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BalanceQueryForZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintZeroQuantity"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OwnerQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferFromIncorrectOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToNonERC721ReceiverImplementer"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "URIQueryForNonexistentToken"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURI",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "batchMintTo"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedOrOwner",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isApprovedOrOwnerOf",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_tokenURI",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "mintTo"
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "batchMintTo(address,uint256,string,bytes)": {
            "details": "The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.",
            "params": {
              "_baseURI": "The baseURI for the `n` number of NFTs minted. The metadata for each NFT is `baseURI/tokenId`",
              "_data": "Additional data to pass along during the minting of the NFT.",
              "_quantity": "The number of NFTs to mint.",
              "_to": "The recipient of the NFT to mint."
            }
          },
          "burn(uint256)": {
            "details": "ERC721A's `_burn(uint256,bool)` internally checks for token approvals.",
            "params": {
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "ID of a token."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "mintTo(address,string)": {
            "details": "The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.",
            "params": {
              "_to": "The recipient of the NFT to mint.",
              "_tokenURI": "The full metadata URI for the NFT minted."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See `BatchMintMetadata` for handling of metadata in this contract.",
            "params": {
              "_tokenId": "The tokenId of an NFT."
            }
          },
          "totalSupply()": {
            "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "batchMintTo(address,uint256,string,bytes)": {
            "notice": "Lets an authorized address mint multiple NFTs at once to a recipient."
          },
          "burn(uint256)": {
            "notice": "Lets an owner or approved operator burn the NFT of the given tokenId."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens the given tokenId belongs to."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "isApprovedOrOwner(address,uint256)": {
            "notice": "Returns whether a given address is the owner, or approved to transfer an NFT."
          },
          "mintTo(address,string)": {
            "notice": "Lets an authorized address mint an NFT to a recipient."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "tokenURI(uint256)": {
            "notice": "Returns the metadata URI for an NFT."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@chainlink/=node_modules/@chainlink/",
        ":@ensdomains/=node_modules/@ensdomains/",
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@thirdweb-dev/=node_modules/@thirdweb-dev/",
        ":contracts/=contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat/=node_modules/hardhat/",
        ":script/=script/",
        ":test/=test/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "node_modules/@thirdweb-dev/contracts/base/ERC721Base.sol": "ERC721Base"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@thirdweb-dev/contracts/base/ERC721Base.sol": {
        "keccak256": "0xa153404168b3ee0a4b2118874af998930a47e07335f4e88ba00e3e8c8f42746a",
        "urls": [
          "bzz-raw://0a9ebacdecae455e4e09cf1a211b49622571e29e735e673dbc63314d2069a6c4",
          "dweb:/ipfs/QmTG6HKFeFuEqREimUy3S7kjsKS5UR71ZSnkYpbmXTwa14"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@thirdweb-dev/contracts/eip/ERC165.sol": {
        "keccak256": "0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b",
        "urls": [
          "bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c",
          "dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr"
        ],
        "license": "MIT"
      },
      "node_modules/@thirdweb-dev/contracts/eip/ERC721A.sol": {
        "keccak256": "0xdc52fd42f02f5f3d146c729d7faf6b1d187201c14206c771bc98c8b531310735",
        "urls": [
          "bzz-raw://6b89cef38a612ba229a7abef739ee03204676552a785449bc4ca517b4a37a076",
          "dweb:/ipfs/QmezgY1F5A6Mp3GuxRtD93ErKaEJJTdS192UzFokvsKeZM"
        ],
        "license": "MIT"
      },
      "node_modules/@thirdweb-dev/contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "node_modules/@thirdweb-dev/contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9",
        "urls": [
          "bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf",
          "dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He"
        ],
        "license": "Apache 2.0"
      },
      "node_modules/@thirdweb-dev/contracts/eip/interface/IERC721.sol": {
        "keccak256": "0xbd9f2dd131e8f1e4e50b1b116eae917510ab9bf5d4356de37c5daf4cffdfa049",
        "urls": [
          "bzz-raw://8ac3530b317083464271b100de1976ed9179b9e7d5a4fc3d992c61c80676a676",
          "dweb:/ipfs/QmUq1AVzymvp7Y8H1eypGEGU4icjzn5vDSvKMNpXnoaeMT"
        ],
        "license": "MIT"
      },
      "node_modules/@thirdweb-dev/contracts/eip/interface/IERC721A.sol": {
        "keccak256": "0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd",
        "urls": [
          "bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8",
          "dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5"
        ],
        "license": "MIT"
      },
      "node_modules/@thirdweb-dev/contracts/eip/interface/IERC721Metadata.sol": {
        "keccak256": "0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb",
        "urls": [
          "bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e",
          "dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@thirdweb-dev/contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0x8a6253c2ed20a78864aa309d416b3cb264c67aaccca2416787c2fb419bef7beb",
        "urls": [
          "bzz-raw://f10a9d0ca8c8cf62e19f1de27e5f4716e8ad96497f26238bc403aff134c5d2d8",
          "dweb:/ipfs/QmTihBeEHfWwbYs2Vu7ZSzLhGimXVAFthzyBoP4nXgmThM"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@thirdweb-dev/contracts/extension/ContractMetadata.sol": {
        "keccak256": "0x2d178fb7a7513ab61704f2a2d872e9a7d022b10b7844c623c70c83f308bae93d",
        "urls": [
          "bzz-raw://ab93cfd587cdf3b5b65a3e9fd6f54b71780fc8493cae0ddca66fd62c885cb400",
          "dweb:/ipfs/QmPXVxwppDnz9pNVKx83vNGKxpoGxA7dYyveWSjEMbP2xH"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@thirdweb-dev/contracts/extension/Multicall.sol": {
        "keccak256": "0x6b01a01f258774dca807d9902cdfd956895c65b09d931c0b88df97a1086ee504",
        "urls": [
          "bzz-raw://cda6ed9746e93537a4e9ae705a0166247cb5ba9b375b68f96fe8612f79e0609c",
          "dweb:/ipfs/QmY1j68ozowaViXDnDtYK64vWsLH3PYMUxKxGqEgsfYh6m"
        ],
        "license": "MIT"
      },
      "node_modules/@thirdweb-dev/contracts/extension/Ownable.sol": {
        "keccak256": "0xefa70fe6dac75f78d2ef3b4745aa638af9ec925a1b44013cf029e450ef95023d",
        "urls": [
          "bzz-raw://16f69e428b9ed7281b918264b5d72402d9f316836c5ff5cbf9e6a976a6cd275c",
          "dweb:/ipfs/QmTcc5qghCVpfsDcv21PQzfzMDRdNRu4kD5L9WeBR1CGWr"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@thirdweb-dev/contracts/extension/Royalty.sol": {
        "keccak256": "0x40ad6d59529523d35fecaf949f145ba1c3af225f809cc133765b593fb7d83321",
        "urls": [
          "bzz-raw://65274cf0811d385ff9c4d6416f247f55ee7694a08910725ee8c0dba1d3c90a19",
          "dweb:/ipfs/QmNXWqHbsGoADXURj2HdJcqjZJY8VvbGLNG8dS9gV2C1Xh"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@thirdweb-dev/contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x72afb65f99429230a9d6ca7734853cf8c53264d0d013f1bff3a5625396ee1ff1",
        "urls": [
          "bzz-raw://8de0d8da22da658225705129bde46f3d18dc511dd300906ca457f04806f200b0",
          "dweb:/ipfs/QmWbTpgvQz3mE4RiBBcHhKJENroMD1ACMeKDECcyuanCvC"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@thirdweb-dev/contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0x78589586f039d77c94a346b8d1fc3e4bf14ef7d4dc3f51c75b18fd04b79433ea",
        "urls": [
          "bzz-raw://377f057fd9f89c4eca439d37f9188e4275e7e558fbc06c9d64f6f30bc90cf921",
          "dweb:/ipfs/QmfKRmLuffQNZmt5UyP9xa2oa9TKvphNvKnsfkg4Jzd1Ag"
        ],
        "license": "MIT"
      },
      "node_modules/@thirdweb-dev/contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xa1195f8a222f99add4d594e6a1fa4c3ac36b9ef65378dbe1151eec24fa4d2ec0",
        "urls": [
          "bzz-raw://20e7e62207e61848cbeed4439bd6366b72b3f5dad420fe65f777f3618e718294",
          "dweb:/ipfs/QmPRzBPce3FmPCmMDSzCPzNvViAYo9rD182Mkuequt2L5a"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@thirdweb-dev/contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x82cd77453b9200c541910ac0f72be940dfa96552029550f304ccbf149d950020",
        "urls": [
          "bzz-raw://6fc450122af8f6669e2949c3cbfca1a56f5405520c7652dd7f236f172f2a5241",
          "dweb:/ipfs/QmUQaHNahCR9VPF6iwqJ4kFkW9JsHdzWGvBHhpUrqy3Urn"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@thirdweb-dev/contracts/lib/TWAddress.sol": {
        "keccak256": "0x4546bc7fd7332d33610063ea1c7e8cde8528ac31fa6f49e25d92777d937def4f",
        "urls": [
          "bzz-raw://848840b707dbf66a1e8a383652eee426aff9814f06ef01e82800ed9799b2278a",
          "dweb:/ipfs/QmTeYtUEEsZvCpeqfEpkWqP2Kqb7QWS1tSfzRgeSUeFbAx"
        ],
        "license": "MIT"
      },
      "node_modules/@thirdweb-dev/contracts/lib/TWStrings.sol": {
        "keccak256": "0x7cc7fcf5ab662a5d0b179371ca056e67f4a998c49379ff2cbd7bd91609ebb401",
        "urls": [
          "bzz-raw://a679fcdf635a741c27d4e52b1f865bcdc44e54866a89db08239d72dfa48fe7f6",
          "dweb:/ipfs/QmaKKiFma4EpnDt7UmAYRuRmb2cxLBMJ7ik1zsuJHkzmVU"
        ],
        "license": "MIT"
      },
      "node_modules/@thirdweb-dev/contracts/openzeppelin-presets/token/ERC721/IERC721Receiver.sol": {
        "keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
        "urls": [
          "bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
          "dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
        ],
        "license": "MIT"
      },
      "node_modules/@thirdweb-dev/contracts/openzeppelin-presets/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "node_modules/@thirdweb-dev/contracts/base/ERC721Base.sol",
    "id": 24557,
    "exportedSymbols": {
      "BatchMintMetadata": [
        26402
      ],
      "ContractMetadata": [
        26460
      ],
      "ERC721A": [
        25953
      ],
      "ERC721Base": [
        24556
      ],
      "IContractMetadata": [
        26863
      ],
      "IERC165": [
        25965
      ],
      "IERC2981": [
        25984
      ],
      "IMulticall": [
        26877
      ],
      "IOwnable": [
        26900
      ],
      "IRoyalty": [
        26964
      ],
      "Multicall": [
        26519
      ],
      "Ownable": [
        26601
      ],
      "Royalty": [
        26840
      ],
      "TWAddress": [
        27412
      ],
      "TWStrings": [
        27615
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:7132:23",
    "nodes": [
      {
        "id": 24255,
        "nodeType": "PragmaDirective",
        "src": "39:23:23",
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 24257,
        "nodeType": "ImportDirective",
        "src": "64:45:23",
        "absolutePath": "node_modules/@thirdweb-dev/contracts/eip/ERC721A.sol",
        "file": "../eip/ERC721A.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24557,
        "sourceUnit": 25954,
        "symbolAliases": [
          {
            "foreign": {
              "id": 24256,
              "name": "ERC721A",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 25953,
              "src": "73:7:23",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 24258,
        "nodeType": "ImportDirective",
        "src": "111:43:23",
        "absolutePath": "node_modules/@thirdweb-dev/contracts/extension/ContractMetadata.sol",
        "file": "../extension/ContractMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24557,
        "sourceUnit": 26461,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24259,
        "nodeType": "ImportDirective",
        "src": "155:36:23",
        "absolutePath": "node_modules/@thirdweb-dev/contracts/extension/Multicall.sol",
        "file": "../extension/Multicall.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24557,
        "sourceUnit": 26520,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24260,
        "nodeType": "ImportDirective",
        "src": "192:34:23",
        "absolutePath": "node_modules/@thirdweb-dev/contracts/extension/Ownable.sol",
        "file": "../extension/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24557,
        "sourceUnit": 26602,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24261,
        "nodeType": "ImportDirective",
        "src": "227:34:23",
        "absolutePath": "node_modules/@thirdweb-dev/contracts/extension/Royalty.sol",
        "file": "../extension/Royalty.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24557,
        "sourceUnit": 26841,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24262,
        "nodeType": "ImportDirective",
        "src": "262:44:23",
        "absolutePath": "node_modules/@thirdweb-dev/contracts/extension/BatchMintMetadata.sol",
        "file": "../extension/BatchMintMetadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24557,
        "sourceUnit": 26403,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24263,
        "nodeType": "ImportDirective",
        "src": "308:30:23",
        "absolutePath": "node_modules/@thirdweb-dev/contracts/lib/TWStrings.sol",
        "file": "../lib/TWStrings.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24557,
        "sourceUnit": 27616,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24556,
        "nodeType": "ContractDefinition",
        "src": "1041:6129:23",
        "nodes": [
          {
            "id": 24279,
            "nodeType": "UsingForDirective",
            "src": "1144:28:23",
            "global": false,
            "libraryName": {
              "id": 24277,
              "name": "TWStrings",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 27615,
              "src": "1150:9:23"
            },
            "typeName": {
              "id": 24278,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1164:7:23",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 24283,
            "nodeType": "VariableDeclaration",
            "src": "1354:42:23",
            "constant": false,
            "mutability": "mutable",
            "name": "fullURI",
            "nameLocation": "1389:7:23",
            "scope": 24556,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
              "typeString": "mapping(uint256 => string)"
            },
            "typeName": {
              "id": 24282,
              "keyType": {
                "id": 24280,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1362:7:23",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1354:26:23",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                "typeString": "mapping(uint256 => string)"
              },
              "valueType": {
                "id": 24281,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "1373:6:23",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "visibility": "private"
          },
          {
            "id": 24309,
            "nodeType": "FunctionDefinition",
            "src": "1582:272:23",
            "body": {
              "id": 24308,
              "nodeType": "Block",
              "src": "1748:106:23",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 24299,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1770:3:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 24300,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1770:10:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 24298,
                      "name": "_setupOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26594,
                      "src": "1758:11:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 24301,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1758:23:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24302,
                  "nodeType": "ExpressionStatement",
                  "src": "1758:23:23"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24304,
                        "name": "_royaltyRecipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24289,
                        "src": "1816:17:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 24305,
                        "name": "_royaltyBps",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24291,
                        "src": "1835:11:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      ],
                      "id": 24303,
                      "name": "_setupDefaultRoyaltyInfo",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26771,
                      "src": "1791:24:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 24306,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1791:56:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24307,
                  "nodeType": "ExpressionStatement",
                  "src": "1791:56:23"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 24294,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 24285,
                    "src": "1732:5:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 24295,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 24287,
                    "src": "1739:7:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 24296,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 24293,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 25953,
                  "src": "1724:7:23"
                },
                "nodeType": "ModifierInvocation",
                "src": "1724:23:23"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 24292,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24285,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1617:5:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24309,
                  "src": "1603:19:23",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 24284,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1603:6:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24287,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1646:7:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24309,
                  "src": "1632:21:23",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 24286,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1632:6:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24289,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "1671:17:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24309,
                  "src": "1663:25:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 24288,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1663:7:23",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24291,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "1706:11:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24309,
                  "src": "1698:19:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 24290,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1698:7:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1593:130:23"
            },
            "returnParameters": {
              "id": 24297,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1748:0:23"
            },
            "scope": 24556,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 24340,
            "nodeType": "FunctionDefinition",
            "src": "2104:444:23",
            "body": {
              "id": 24339,
              "nodeType": "Block",
              "src": "2213:335:23",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 24337,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 24330,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 24326,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 24322,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 24320,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24312,
                            "src": "2242:11:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783031666663396137",
                            "id": 24321,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2257:10:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_33540519_by_1",
                              "typeString": "int_const 33540519"
                            },
                            "value": "0x01ffc9a7"
                          },
                          "src": "2242:25:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 24325,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 24323,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24312,
                            "src": "2317:11:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30783830616335386364",
                            "id": 24324,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2332:10:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2158778573_by_1",
                              "typeString": "int_const 2158778573"
                            },
                            "value": "0x80ac58cd"
                          },
                          "src": "2317:25:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "2242:100:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 24329,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 24327,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24312,
                          "src": "2392:11:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30783562356531333966",
                          "id": 24328,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2407:10:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1532892063_by_1",
                            "typeString": "int_const 1532892063"
                          },
                          "value": "0x5b5e139f"
                        },
                        "src": "2392:25:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "2242:175:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "id": 24336,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 24331,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24312,
                        "src": "2475:11:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "arguments": [
                            {
                              "id": 24333,
                              "name": "IERC2981",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25984,
                              "src": "2495:8:23",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$25984_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_type$_t_contract$_IERC2981_$25984_$",
                                "typeString": "type(contract IERC2981)"
                              }
                            ],
                            "id": 24332,
                            "name": "type",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -27,
                            "src": "2490:4:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 24334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2490:14:23",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_meta_type_t_contract$_IERC2981_$25984",
                            "typeString": "type(contract IERC2981)"
                          }
                        },
                        "id": 24335,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "interfaceId",
                        "nodeType": "MemberAccess",
                        "src": "2490:26:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "src": "2475:41:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "2242:274:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 24319,
                  "id": 24338,
                  "nodeType": "Return",
                  "src": "2223:293:23"
                }
              ]
            },
            "baseFunctions": [
              24718,
              25964
            ],
            "documentation": {
              "id": 24310,
              "nodeType": "StructuredDocumentation",
              "src": "2040:59:23",
              "text": "@dev See ERC165: https://eips.ethereum.org/EIPS/eip-165"
            },
            "functionSelector": "01ffc9a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "2113:17:23",
            "overrides": {
              "id": 24316,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 24314,
                  "name": "ERC721A",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 25953,
                  "src": "2180:7:23"
                },
                {
                  "id": 24315,
                  "name": "IERC165",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 25965,
                  "src": "2189:7:23"
                }
              ],
              "src": "2171:26:23"
            },
            "parameters": {
              "id": 24313,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24312,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "2138:11:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24340,
                  "src": "2131:18:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 24311,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "2131:6:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2130:20:23"
            },
            "returnParameters": {
              "id": 24319,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24318,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 24340,
                  "src": "2207:4:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 24317,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2207:4:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2206:6:23"
            },
            "scope": 24556,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 24384,
            "nodeType": "FunctionDefinition",
            "src": "2962:378:23",
            "body": {
              "id": 24383,
              "nodeType": "Block",
              "src": "3051:289:23",
              "statements": [
                {
                  "assignments": [
                    24350
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 24350,
                      "mutability": "mutable",
                      "name": "fullUriForToken",
                      "nameLocation": "3075:15:23",
                      "nodeType": "VariableDeclaration",
                      "scope": 24383,
                      "src": "3061:29:23",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 24349,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3061:6:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 24354,
                  "initialValue": {
                    "baseExpression": {
                      "id": 24351,
                      "name": "fullURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24283,
                      "src": "3093:7:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                        "typeString": "mapping(uint256 => string storage ref)"
                      }
                    },
                    "id": 24353,
                    "indexExpression": {
                      "id": 24352,
                      "name": "_tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24343,
                      "src": "3101:8:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3093:17:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3061:49:23"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 24361,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 24357,
                            "name": "fullUriForToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24350,
                            "src": "3130:15:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 24356,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3124:5:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 24355,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "3124:5:23",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 24358,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3124:22:23",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 24359,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3124:29:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 24360,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3156:1:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3124:33:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 24365,
                  "nodeType": "IfStatement",
                  "src": "3120:86:23",
                  "trueBody": {
                    "id": 24364,
                    "nodeType": "Block",
                    "src": "3159:47:23",
                    "statements": [
                      {
                        "expression": {
                          "id": 24362,
                          "name": "fullUriForToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24350,
                          "src": "3180:15:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 24348,
                        "id": 24363,
                        "nodeType": "Return",
                        "src": "3173:22:23"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    24367
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 24367,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "3230:8:23",
                      "nodeType": "VariableDeclaration",
                      "scope": 24383,
                      "src": "3216:22:23",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 24366,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3216:6:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 24371,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 24369,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24343,
                        "src": "3252:8:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 24368,
                      "name": "getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26349,
                      "src": "3241:10:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 24370,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3241:20:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3216:45:23"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 24376,
                            "name": "batchUri",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24367,
                            "src": "3302:8:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 24377,
                                "name": "_tokenId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 24343,
                                "src": "3312:8:23",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 24378,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "toString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 27497,
                              "src": "3312:17:23",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 24379,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3312:19:23",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "expression": {
                            "id": 24374,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "3285:3:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 24375,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "3285:16:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 24380,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3285:47:23",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 24373,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "3278:6:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                        "typeString": "type(string storage pointer)"
                      },
                      "typeName": {
                        "id": 24372,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "3278:6:23",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 24381,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3278:55:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 24348,
                  "id": 24382,
                  "nodeType": "Return",
                  "src": "3271:62:23"
                }
              ]
            },
            "baseFunctions": [
              24962
            ],
            "documentation": {
              "id": 24341,
              "nodeType": "StructuredDocumentation",
              "src": "2740:217:23",
              "text": "  @notice         Returns the metadata URI for an NFT.\n  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n  @param _tokenId The tokenId of an NFT."
            },
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "2971:8:23",
            "overrides": {
              "id": 24345,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3018:8:23"
            },
            "parameters": {
              "id": 24344,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24343,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "2988:8:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24384,
                  "src": "2980:16:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24342,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2980:7:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2979:18:23"
            },
            "returnParameters": {
              "id": 24348,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24347,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 24384,
                  "src": "3036:13:23",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 24346,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3036:6:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3035:15:23"
            },
            "scope": 24556,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 24412,
            "nodeType": "FunctionDefinition",
            "src": "3876:213:23",
            "body": {
              "id": 24411,
              "nodeType": "Block",
              "src": "3945:144:23",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 24393,
                          "name": "_canMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24527,
                          "src": "3963:8:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 24394,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3963:10:23",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a656420746f206d696e742e",
                        "id": 24395,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3975:25:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        },
                        "value": "Not authorized to mint."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        }
                      ],
                      "id": 24392,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3955:7:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 24396,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3955:46:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24397,
                  "nodeType": "ExpressionStatement",
                  "src": "3955:46:23"
                },
                {
                  "expression": {
                    "id": 24403,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 24398,
                        "name": "fullURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24283,
                        "src": "4011:7:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                          "typeString": "mapping(uint256 => string storage ref)"
                        }
                      },
                      "id": 24401,
                      "indexExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 24399,
                          "name": "nextTokenIdToMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24465,
                          "src": "4019:17:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 24400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4019:19:23",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "4011:28:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 24402,
                      "name": "_tokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24389,
                      "src": "4042:9:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "4011:40:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 24404,
                  "nodeType": "ExpressionStatement",
                  "src": "4011:40:23"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24406,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24387,
                        "src": "4071:3:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "31",
                        "id": 24407,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4076:1:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      {
                        "hexValue": "",
                        "id": 24408,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4079:2:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 24405,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        25203,
                        25366
                      ],
                      "referencedDeclaration": 25366,
                      "src": "4061:9:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,bytes memory)"
                      }
                    },
                    "id": 24409,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4061:21:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24410,
                  "nodeType": "ExpressionStatement",
                  "src": "4061:21:23"
                }
              ]
            },
            "documentation": {
              "id": 24385,
              "nodeType": "StructuredDocumentation",
              "src": "3527:344:23",
              "text": "  @notice          Lets an authorized address mint an NFT to a recipient.\n  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\n  @param _to       The recipient of the NFT to mint.\n  @param _tokenURI The full metadata URI for the NFT minted."
            },
            "functionSelector": "0075a317",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mintTo",
            "nameLocation": "3885:6:23",
            "parameters": {
              "id": 24390,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24387,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "3900:3:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24412,
                  "src": "3892:11:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 24386,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3892:7:23",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24389,
                  "mutability": "mutable",
                  "name": "_tokenURI",
                  "nameLocation": "3919:9:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24412,
                  "src": "3905:23:23",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 24388,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3905:6:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3891:38:23"
            },
            "returnParameters": {
              "id": 24391,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3945:0:23"
            },
            "scope": 24556,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 24444,
            "nodeType": "FunctionDefinition",
            "src": "4650:325:23",
            "body": {
              "id": 24443,
              "nodeType": "Block",
              "src": "4800:175:23",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 24425,
                          "name": "_canMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24527,
                          "src": "4818:8:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 24426,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4818:10:23",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a656420746f206d696e742e",
                        "id": 24427,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4830:25:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        },
                        "value": "Not authorized to mint."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_19fa12bcfa7d6a1607ff6d71275840261c73292c97fc8050f5d1b6b6df578e14",
                          "typeString": "literal_string \"Not authorized to mint.\""
                        }
                      ],
                      "id": 24424,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4810:7:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 24428,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4810:46:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24429,
                  "nodeType": "ExpressionStatement",
                  "src": "4810:46:23"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 24431,
                          "name": "nextTokenIdToMint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24465,
                          "src": "4885:17:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 24432,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4885:19:23",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 24433,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24417,
                        "src": "4906:9:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 24434,
                        "name": "_baseURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24419,
                        "src": "4917:8:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 24430,
                      "name": "_batchMintMetadata",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26401,
                      "src": "4866:18:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256,uint256,string memory) returns (uint256,uint256)"
                      }
                    },
                    "id": 24435,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4866:60:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "id": 24436,
                  "nodeType": "ExpressionStatement",
                  "src": "4866:60:23"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24438,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24415,
                        "src": "4946:3:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 24439,
                        "name": "_quantity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24417,
                        "src": "4951:9:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 24440,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24421,
                        "src": "4962:5:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 24437,
                      "name": "_safeMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        25203,
                        25366
                      ],
                      "referencedDeclaration": 25366,
                      "src": "4936:9:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (address,uint256,bytes memory)"
                      }
                    },
                    "id": 24441,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4936:32:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24442,
                  "nodeType": "ExpressionStatement",
                  "src": "4936:32:23"
                }
              ]
            },
            "documentation": {
              "id": 24413,
              "nodeType": "StructuredDocumentation",
              "src": "4095:550:23",
              "text": "  @notice          Lets an authorized address mint multiple NFTs at once to a recipient.\n  @dev             The logic in the `_canMint` function determines whether the caller is authorized to mint NFTs.\n  @param _to       The recipient of the NFT to mint.\n  @param _quantity The number of NFTs to mint.\n  @param _baseURI  The baseURI for the `n` number of NFTs minted. The metadata for each NFT is `baseURI/tokenId`\n  @param _data     Additional data to pass along during the minting of the NFT."
            },
            "functionSelector": "754a81d9",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "batchMintTo",
            "nameLocation": "4659:11:23",
            "parameters": {
              "id": 24422,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24415,
                  "mutability": "mutable",
                  "name": "_to",
                  "nameLocation": "4688:3:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24444,
                  "src": "4680:11:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 24414,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4680:7:23",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24417,
                  "mutability": "mutable",
                  "name": "_quantity",
                  "nameLocation": "4709:9:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24444,
                  "src": "4701:17:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24416,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4701:7:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24419,
                  "mutability": "mutable",
                  "name": "_baseURI",
                  "nameLocation": "4742:8:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24444,
                  "src": "4728:22:23",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 24418,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4728:6:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24421,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "4773:5:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24444,
                  "src": "4760:18:23",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 24420,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4760:5:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4670:114:23"
            },
            "returnParameters": {
              "id": 24423,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4800:0:23"
            },
            "scope": 24556,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 24456,
            "nodeType": "FunctionDefinition",
            "src": "5249:87:23",
            "body": {
              "id": 24455,
              "nodeType": "Block",
              "src": "5298:38:23",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 24451,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24447,
                        "src": "5314:8:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "74727565",
                        "id": 24452,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5324:4:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 24450,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        25666,
                        25848
                      ],
                      "referencedDeclaration": 25848,
                      "src": "5308:5:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
                        "typeString": "function (uint256,bool)"
                      }
                    },
                    "id": 24453,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5308:21:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 24454,
                  "nodeType": "ExpressionStatement",
                  "src": "5308:21:23"
                }
              ]
            },
            "documentation": {
              "id": 24445,
              "nodeType": "StructuredDocumentation",
              "src": "4981:263:23",
              "text": "  @notice         Lets an owner or approved operator burn the NFT of the given tokenId.\n  @dev            ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\n  @param _tokenId The tokenId of the NFT to burn."
            },
            "functionSelector": "42966c68",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nameLocation": "5258:4:23",
            "parameters": {
              "id": 24448,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24447,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "5271:8:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24456,
                  "src": "5263:16:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24446,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5263:7:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5262:18:23"
            },
            "returnParameters": {
              "id": 24449,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5298:0:23"
            },
            "scope": 24556,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 24465,
            "nodeType": "FunctionDefinition",
            "src": "5591:104:23",
            "body": {
              "id": 24464,
              "nodeType": "Block",
              "src": "5658:37:23",
              "statements": [
                {
                  "expression": {
                    "id": 24462,
                    "name": "_currentIndex",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 24603,
                    "src": "5675:13:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 24461,
                  "id": 24463,
                  "nodeType": "Return",
                  "src": "5668:20:23"
                }
              ]
            },
            "documentation": {
              "id": 24457,
              "nodeType": "StructuredDocumentation",
              "src": "5520:66:23",
              "text": "@notice The tokenId assigned to the next new NFT to be minted."
            },
            "functionSelector": "3b1475a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextTokenIdToMint",
            "nameLocation": "5600:17:23",
            "parameters": {
              "id": 24458,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5617:2:23"
            },
            "returnParameters": {
              "id": 24461,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24460,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 24465,
                  "src": "5649:7:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24459,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5649:7:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5648:9:23"
            },
            "scope": 24556,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 24500,
            "nodeType": "FunctionDefinition",
            "src": "5795:357:23",
            "body": {
              "id": 24499,
              "nodeType": "Block",
              "src": "5950:202:23",
              "statements": [
                {
                  "assignments": [
                    24476
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 24476,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "5968:5:23",
                      "nodeType": "VariableDeclaration",
                      "scope": 24499,
                      "src": "5960:13:23",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 24475,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5960:7:23",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 24480,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 24478,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 24470,
                        "src": "5984:8:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 24477,
                      "name": "ownerOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24899,
                      "src": "5976:7:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 24479,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5976:17:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5960:33:23"
                },
                {
                  "expression": {
                    "id": 24497,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24481,
                      "name": "isApprovedOrOwnerOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24473,
                      "src": "6003:19:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 24495,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 24489,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 24484,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 24482,
                                "name": "_operator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 24468,
                                "src": "6026:9:23",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 24483,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 24476,
                                "src": "6039:5:23",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "6026:18:23",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "arguments": [
                                {
                                  "id": 24486,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 24476,
                                  "src": "6077:5:23",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 24487,
                                  "name": "_operator",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 24468,
                                  "src": "6084:9:23",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 24485,
                                "name": "isApprovedForAll",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 25091,
                                "src": "6060:16:23",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (address,address) view returns (bool)"
                                }
                              },
                              "id": 24488,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6060:34:23",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "6026:68:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 24494,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "arguments": [
                                {
                                  "id": 24491,
                                  "name": "_tokenId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 24470,
                                  "src": "6122:8:23",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 24490,
                                "name": "getApproved",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 25039,
                                "src": "6110:11:23",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                                  "typeString": "function (uint256) view returns (address)"
                                }
                              },
                              "id": 24492,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6110:21:23",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "id": 24493,
                              "name": "_operator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24468,
                              "src": "6135:9:23",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "6110:34:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "6026:118:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      ],
                      "id": 24496,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "6025:120:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "6003:142:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 24498,
                  "nodeType": "ExpressionStatement",
                  "src": "6003:142:23"
                }
              ]
            },
            "documentation": {
              "id": 24466,
              "nodeType": "StructuredDocumentation",
              "src": "5701:89:23",
              "text": "@notice Returns whether a given address is the owner, or approved to transfer an NFT."
            },
            "functionSelector": "430c2081",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isApprovedOrOwner",
            "nameLocation": "5804:17:23",
            "parameters": {
              "id": 24471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24468,
                  "mutability": "mutable",
                  "name": "_operator",
                  "nameLocation": "5830:9:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24500,
                  "src": "5822:17:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 24467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5822:7:23",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24470,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "5849:8:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24500,
                  "src": "5841:16:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24469,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5841:7:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5821:37:23"
            },
            "returnParameters": {
              "id": 24474,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24473,
                  "mutability": "mutable",
                  "name": "isApprovedOrOwnerOf",
                  "nameLocation": "5925:19:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 24500,
                  "src": "5920:24:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 24472,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5920:4:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5919:26:23"
            },
            "scope": 24556,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 24514,
            "nodeType": "FunctionDefinition",
            "src": "6445:121:23",
            "body": {
              "id": 24513,
              "nodeType": "Block",
              "src": "6521:45:23",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 24511,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 24507,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "6538:3:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 24508,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "6538:10:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 24509,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26553,
                        "src": "6552:5:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 24510,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6552:7:23",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6538:21:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 24506,
                  "id": 24512,
                  "nodeType": "Return",
                  "src": "6531:28:23"
                }
              ]
            },
            "baseFunctions": [
              26459
            ],
            "documentation": {
              "id": 24501,
              "nodeType": "StructuredDocumentation",
              "src": "6355:85:23",
              "text": "@dev Returns whether contract metadata can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetContractURI",
            "nameLocation": "6454:18:23",
            "overrides": {
              "id": 24503,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "6497:8:23"
            },
            "parameters": {
              "id": 24502,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6472:2:23"
            },
            "returnParameters": {
              "id": 24506,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24505,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 24514,
                  "src": "6515:4:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 24504,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6515:4:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6514:6:23"
            },
            "scope": 24556,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 24527,
            "nodeType": "FunctionDefinition",
            "src": "6655:102:23",
            "body": {
              "id": 24526,
              "nodeType": "Block",
              "src": "6712:45:23",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 24524,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 24520,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "6729:3:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 24521,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "6729:10:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 24522,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26553,
                        "src": "6743:5:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 24523,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6743:7:23",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6729:21:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 24519,
                  "id": 24525,
                  "nodeType": "Return",
                  "src": "6722:28:23"
                }
              ]
            },
            "documentation": {
              "id": 24515,
              "nodeType": "StructuredDocumentation",
              "src": "6572:78:23",
              "text": "@dev Returns whether a token can be minted in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canMint",
            "nameLocation": "6664:8:23",
            "parameters": {
              "id": 24516,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6672:2:23"
            },
            "returnParameters": {
              "id": 24519,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24518,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 24527,
                  "src": "6706:4:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 24517,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6706:4:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6705:6:23"
            },
            "scope": 24556,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 24541,
            "nodeType": "FunctionDefinition",
            "src": "6841:115:23",
            "body": {
              "id": 24540,
              "nodeType": "Block",
              "src": "6911:45:23",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 24538,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 24534,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "6928:3:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 24535,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "6928:10:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 24536,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26553,
                        "src": "6942:5:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 24537,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6942:7:23",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6928:21:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 24533,
                  "id": 24539,
                  "nodeType": "Return",
                  "src": "6921:28:23"
                }
              ]
            },
            "baseFunctions": [
              26600
            ],
            "documentation": {
              "id": 24528,
              "nodeType": "StructuredDocumentation",
              "src": "6763:73:23",
              "text": "@dev Returns whether owner can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetOwner",
            "nameLocation": "6850:12:23",
            "overrides": {
              "id": 24530,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "6887:8:23"
            },
            "parameters": {
              "id": 24529,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6862:2:23"
            },
            "returnParameters": {
              "id": 24533,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24532,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 24541,
                  "src": "6905:4:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 24531,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6905:4:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6904:6:23"
            },
            "scope": 24556,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 24555,
            "nodeType": "FunctionDefinition",
            "src": "7047:121:23",
            "body": {
              "id": 24554,
              "nodeType": "Block",
              "src": "7123:45:23",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 24552,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 24548,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "7140:3:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 24549,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "7140:10:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 24550,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26553,
                        "src": "7154:5:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 24551,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7154:7:23",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7140:21:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 24547,
                  "id": 24553,
                  "nodeType": "Return",
                  "src": "7133:28:23"
                }
              ]
            },
            "baseFunctions": [
              26839
            ],
            "documentation": {
              "id": 24542,
              "nodeType": "StructuredDocumentation",
              "src": "6962:80:23",
              "text": "@dev Returns whether royalty info can be set in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canSetRoyaltyInfo",
            "nameLocation": "7056:18:23",
            "overrides": {
              "id": 24544,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7099:8:23"
            },
            "parameters": {
              "id": 24543,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7074:2:23"
            },
            "returnParameters": {
              "id": 24547,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24546,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 24555,
                  "src": "7117:4:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 24545,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7117:4:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7116:6:23"
            },
            "scope": 24556,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 24265,
              "name": "ERC721A",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 25953,
              "src": "1064:7:23"
            },
            "id": 24266,
            "nodeType": "InheritanceSpecifier",
            "src": "1064:7:23"
          },
          {
            "baseName": {
              "id": 24267,
              "name": "ContractMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 26460,
              "src": "1073:16:23"
            },
            "id": 24268,
            "nodeType": "InheritanceSpecifier",
            "src": "1073:16:23"
          },
          {
            "baseName": {
              "id": 24269,
              "name": "Multicall",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 26519,
              "src": "1091:9:23"
            },
            "id": 24270,
            "nodeType": "InheritanceSpecifier",
            "src": "1091:9:23"
          },
          {
            "baseName": {
              "id": 24271,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 26601,
              "src": "1102:7:23"
            },
            "id": 24272,
            "nodeType": "InheritanceSpecifier",
            "src": "1102:7:23"
          },
          {
            "baseName": {
              "id": 24273,
              "name": "Royalty",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 26840,
              "src": "1111:7:23"
            },
            "id": 24274,
            "nodeType": "InheritanceSpecifier",
            "src": "1111:7:23"
          },
          {
            "baseName": {
              "id": 24275,
              "name": "BatchMintMetadata",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 26402,
              "src": "1120:17:23"
            },
            "id": 24276,
            "nodeType": "InheritanceSpecifier",
            "src": "1120:17:23"
          }
        ],
        "canonicalName": "ERC721Base",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 24264,
          "nodeType": "StructuredDocumentation",
          "src": "340:699:23",
          "text": "  The `ERC721Base` smart contract implements the ERC721 NFT standard, along with the ERC721A optimization to the standard.\n  It includes the following additions to standard ERC721 logic:\n      - Ability to mint NFTs via the provided `mint` function.\n      - Contract metadata for royalty support on platforms such as OpenSea that use\n        off-chain information to distribute roaylties.\n      - Ownership of the contract, with the ability to restrict certain functions to\n        only be called by the contract's owner.\n      - Multicall capability to perform multiple actions atomically\n      - EIP 2981 compliance for royalty support on NFT marketplaces."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          24556,
          26402,
          26840,
          26964,
          25984,
          26601,
          26900,
          26519,
          26877,
          26460,
          26863,
          25953,
          26168,
          26192,
          26097,
          24580,
          25965,
          27655
        ],
        "name": "ERC721Base",
        "nameLocation": "1050:10:23",
        "scope": 24557,
        "usedErrors": [
          26109,
          26112,
          26115,
          26118,
          26121,
          26124,
          26127,
          26130,
          26133,
          26136,
          26139,
          26142,
          26145
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 23
}