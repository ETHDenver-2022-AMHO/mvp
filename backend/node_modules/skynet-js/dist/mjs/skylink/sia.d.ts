export declare class SiaSkylink {
    bitfield: number;
    merkleRoot: Uint8Array;
    constructor(bitfield: number, merkleRoot: Uint8Array);
    toBytes(): Uint8Array;
    toString(): string;
}
/**
 * Returns a specifier for given name, a specifier can only be 16 bytes so we
 * panic if the given name is too long.
 *
 * @param name - The name.
 * @returns - The specifier, if valid.
 */
export declare function newSpecifier(name: string): Uint8Array;
declare class SiaPublicKey {
    algorithm: Uint8Array;
    key: Uint8Array;
    constructor(algorithm: Uint8Array, key: Uint8Array);
    marshalSia(): Uint8Array;
}
/**
 * Creates a new sia public key. Matches Ed25519PublicKey in sia.
 *
 * @param publicKey - The hex-encoded public key.
 * @returns - The SiaPublicKey.
 */
export declare function newEd25519PublicKey(publicKey: string): SiaPublicKey;
/**
 * Creates a new v2 skylink. Matches NewSkylinkV2 in skyd.
 *
 * @param siaPublicKey - The public key as a SiaPublicKey.
 * @param tweak - The hashed tweak.
 * @returns - The v2 skylink.
 */
export declare function newSkylinkV2(siaPublicKey: SiaPublicKey, tweak: Uint8Array): SiaSkylink;
export {};
//# sourceMappingURL=sia.d.ts.map