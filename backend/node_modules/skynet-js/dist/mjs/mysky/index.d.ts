export type { CustomConnectorOptions } from "./connector";
export { DacLibrary } from "./dac";
import { Connection } from "post-me";
import { Permission } from "skynet-mysky-utils";
import type { CustomUserIDOptions } from "skynet-mysky-utils";
import { Connector, CustomConnectorOptions } from "./connector";
import { SkynetClient } from "../client";
import { DacLibrary } from "./dac";
import { RegistryEntry } from "../registry";
import { CustomGetJSONOptions, CustomSetJSONOptions, JsonData, JSONResponse } from "../skydb";
import { Signature } from "../crypto";
export declare const mySkyDomain = "skynet-mysky.hns";
export declare const mySkyDevDomain = "skynet-mysky-dev.hns";
export declare const mySkyAlphaDomain = "sandbridge.hns";
export declare function loadMySky(this: SkynetClient, skappDomain?: string, customOptions?: CustomConnectorOptions): Promise<MySky>;
export declare class MySky {
    protected connector: Connector;
    protected hostDomain: string;
    static instance: MySky | null;
    dacs: DacLibrary[];
    grantedPermissions: Permission[];
    pendingPermissions: Permission[];
    constructor(connector: Connector, permissions: Permission[], hostDomain: string);
    static New(client: SkynetClient, skappDomain?: string, customOptions?: CustomConnectorOptions): Promise<MySky>;
    /**
     * Loads the given DACs.
     */
    loadDacs(...dacs: DacLibrary[]): Promise<void>;
    addPermissions(...permissions: Permission[]): Promise<void>;
    checkLogin(): Promise<boolean>;
    /**
     * Destroys the mysky connection by:
     *
     * 1. Destroying the connected DACs,
     *
     * 2. Closing the connection,
     *
     * 3. Closing the child iframe
     */
    destroy(): Promise<void>;
    logout(): Promise<void>;
    requestLoginAccess(): Promise<boolean>;
    userID(opts?: CustomUserIDOptions): Promise<string>;
    /**
     * Gets Discoverable JSON at the given path through MySky, if the user has given permissions to do so.
     *
     * @param path - The data path.
     * @param [customOptions] - Additional settings that can optionally be set.
     * @returns - An object containing the json data as well as the skylink for the data.
     */
    getJSON(path: string, customOptions?: CustomGetJSONOptions): Promise<JSONResponse>;
    /**
     * Gets the entry link for the entry at the given path. This is a v2 skylink.
     * This link stays the same even if the content at the entry changes.
     *
     * @param path - The data path.
     * @returns - The entry link.
     */
    getEntryLink(path: string): Promise<string>;
    /**
     * Sets Discoverable JSON at the given path through MySky, if the user has given permissions to do so.
     *
     * @param path - The data path.
     * @param json - The json to set.
     * @param [customOptions] - Additional settings that can optionally be set.
     * @returns - An object containing the json data as well as the skylink for the data.
     */
    setJSON(path: string, json: JsonData, customOptions?: CustomSetJSONOptions): Promise<JSONResponse>;
    protected catchError(errorMsg: string): Promise<void>;
    protected launchUI(): Promise<Window>;
    protected connectUi(childWindow: Window): Promise<Connection>;
    protected loadDac(dac: DacLibrary): Promise<void>;
    protected handleLogin(loggedIn: boolean): void;
    protected signRegistryEntry(entry: RegistryEntry, path: string): Promise<Signature>;
}
//# sourceMappingURL=index.d.ts.map