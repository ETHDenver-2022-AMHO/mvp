"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadDirectoryRequest = exports.uploadDirectory = exports.uploadFileRequest = exports.uploadFile = exports.defaultUploadOptions = void 0;
const file_1 = require("./utils/file");
const options_1 = require("./utils/options");
const format_1 = require("./skylink/format");
const validation_1 = require("./utils/validation");
exports.defaultUploadOptions = {
    ...options_1.defaultBaseOptions,
    endpointUpload: "/skynet/skyfile",
    portalFileFieldname: "file",
    portalDirectoryFileFieldname: "files[]",
    customFilename: "",
    query: undefined,
};
/**
 * Uploads a file to Skynet.
 *
 * @param this - SkynetClient
 * @param file - The file to upload.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/skynet/skyfile"] - The relative URL path of the portal endpoint to contact.
 * @returns - The returned skylink.
 * @throws - Will throw if the request is successful but the upload response does not contain a complete response.
 */
async function uploadFile(file, customOptions) {
    // Validation is done in `uploadDirectoryRequest`.
    const response = await this.uploadFileRequest(file, customOptions);
    // Sanity check.
    validateUploadResponse(response);
    const skylink = format_1.formatSkylink(response.data.skylink);
    const merkleroot = response.data.merkleroot;
    const bitfield = response.data.bitfield;
    return { skylink, merkleroot, bitfield };
}
exports.uploadFile = uploadFile;
/**
 * Makes a request to upload a file to Skynet.
 *
 * @param this - SkynetClient
 * @param file - The file to upload.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/skynet/skyfile"] - The relative URL path of the portal endpoint to contact.
 * @returns - The upload response.
 */
async function uploadFileRequest(file, customOptions) {
    validateFile("file", file, "parameter");
    validation_1.validateOptionalObject("customOptions", customOptions, "parameter", exports.defaultUploadOptions);
    const opts = { ...exports.defaultUploadOptions, ...this.customOptions, ...customOptions };
    const formData = new FormData();
    file = ensureFileObjectConsistency(file);
    if (opts.customFilename) {
        formData.append(opts.portalFileFieldname, file, opts.customFilename);
    }
    else {
        formData.append(opts.portalFileFieldname, file);
    }
    const response = await this.executeRequest({
        ...opts,
        endpointPath: opts.endpointUpload,
        method: "post",
        data: formData,
    });
    return response;
}
exports.uploadFileRequest = uploadFileRequest;
/**
 * Uploads a directory to Skynet.
 *
 * @param this - SkynetClient
 * @param directory - File objects to upload, indexed by their path strings.
 * @param filename - The name of the directory.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/skynet/skyfile"] - The relative URL path of the portal endpoint to contact.
 * @returns - The returned skylink.
 * @throws - Will throw if the request is successful but the upload response does not contain a complete response.
 */
async function uploadDirectory(directory, filename, customOptions) {
    // Validation is done in `uploadDirectoryRequest`.
    const response = await this.uploadDirectoryRequest(directory, filename, customOptions);
    // Sanity check.
    validateUploadResponse(response);
    const skylink = format_1.formatSkylink(response.data.skylink);
    const merkleroot = response.data.merkleroot;
    const bitfield = response.data.bitfield;
    return { skylink, merkleroot, bitfield };
}
exports.uploadDirectory = uploadDirectory;
/**
 * Makes a request to upload a directory to Skynet.
 *
 * @param this - SkynetClient
 * @param directory - File objects to upload, indexed by their path strings.
 * @param filename - The name of the directory.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/skynet/skyfile"] - The relative URL path of the portal endpoint to contact.
 * @returns - The upload response.
 * @throws - Will throw if the input filename is not a string.
 */
async function uploadDirectoryRequest(directory, filename, customOptions) {
    validation_1.validateObject("directory", directory, "parameter");
    validation_1.validateString("filename", filename, "parameter");
    validation_1.validateOptionalObject("customOptions", customOptions, "parameter", exports.defaultUploadOptions);
    const opts = { ...exports.defaultUploadOptions, ...this.customOptions, ...customOptions };
    const formData = new FormData();
    Object.entries(directory).forEach(([path, file]) => {
        file = ensureFileObjectConsistency(file);
        formData.append(opts.portalDirectoryFileFieldname, file, path);
    });
    const response = await this.executeRequest({
        ...opts,
        endpointPath: opts.endpointUpload,
        method: "post",
        data: formData,
        query: { filename },
    });
    return response;
}
exports.uploadDirectoryRequest = uploadDirectoryRequest;
/**
 * Sometimes file object might have had the type property defined manually with
 * Object.defineProperty and some browsers (namely firefox) can have problems
 * reading it after the file has been appended to form data. To overcome this,
 * we recreate the file object using native File constructor with a type defined
 * as a constructor argument.
 *
 * @param file - The input file.
 * @returns - The processed file.
 * @see {@link https://github.com/NebulousLabs/skynet-webportal/issues/290| Related Issue}
 */
function ensureFileObjectConsistency(file) {
    return new File([file], file.name, { type: file_1.getFileMimeType(file) });
}
/**
 * Validates the given value as a file.
 *
 * @param name - The name of the value.
 * @param value - The actual value.
 * @param valueKind - The kind of value that is being checked (e.g. "parameter", "response field", etc.)
 * @throws - Will throw if not a valid file.
 */
function validateFile(name, value, valueKind) {
    if (!(value instanceof File)) {
        validation_1.throwValidationError(name, value, valueKind, "'File'");
    }
}
/**
 * Validates the upload response.
 *
 * @param response - The upload response.
 * @throws - Will throw if not a valid upload response.
 */
function validateUploadResponse(response) {
    try {
        if (!response.data) {
            throw new Error("response.data field missing");
        }
        validation_1.validateString("skylink", response.data.skylink, "upload response field");
        validation_1.validateString("merkleroot", response.data.merkleroot, "upload response field");
        validation_1.validateNumber("bitfield", response.data.bitfield, "upload response field");
    }
    catch (err) {
        throw new Error(`Did not get a complete upload response despite a successful request. Please try again and report this issue to the devs if it persists. Error: ${err}`);
    }
}
