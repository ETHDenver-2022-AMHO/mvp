import { SkynetClient } from "./client";
import { CustomGetEntryOptions, RegistryEntry, CustomSetEntryOptions } from "./registry";
import { CustomUploadOptions } from "./upload";
import { CustomDownloadOptions } from "./download";
export declare const JSON_RESPONSE_VERSION = 2;
export declare type JsonData = Record<string, unknown>;
/**
 * Custom get JSON options.
 *
 * @property [cachedDataLink] - The last known data link. If it hasn't changed, do not download the file contents again.
 */
export declare type CustomGetJSONOptions = CustomGetEntryOptions & CustomDownloadOptions & {
    cachedDataLink?: string;
};
export declare const defaultGetJSONOptions: {
    cachedDataLink: undefined;
    endpointDownload: string;
    download: boolean;
    noResponseMetadata: boolean;
    path: undefined;
    query: undefined;
    subdomain: boolean;
    APIKey: string;
    customUserAgent: string;
    customCookie: string;
    onUploadProgress: undefined;
    endpointGetEntry: string;
    hashedDataKeyHex: boolean;
};
/**
 * Custom set JSON options.
 */
export declare type CustomSetJSONOptions = CustomGetJSONOptions & CustomSetEntryOptions & CustomUploadOptions;
export declare const defaultSetJSONOptions: {
    endpointUpload: string;
    portalFileFieldname: string;
    portalDirectoryFileFieldname: string;
    customFilename: string;
    query: undefined;
    APIKey: string;
    customUserAgent: string;
    customCookie: string;
    onUploadProgress: undefined;
    endpointSetEntry: string;
    hashedDataKeyHex: boolean;
    cachedDataLink: undefined;
    endpointDownload: string;
    download: boolean;
    noResponseMetadata: boolean;
    path: undefined;
    subdomain: boolean;
    endpointGetEntry: string;
};
export declare type JSONResponse = {
    data: JsonData | null;
    dataLink: string | null;
};
/**
 * Gets the JSON object corresponding to the publicKey and dataKey.
 *
 * @param this - SkynetClient
 * @param publicKey - The user public key.
 * @param dataKey - The key of the data to fetch for the given user.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @returns - The returned JSON and revision number.
 * @throws - Will throw if the returned signature does not match the returned entry, or if the skylink in the entry is invalid.
 */
export declare function getJSON(this: SkynetClient, publicKey: string, dataKey: string, customOptions?: CustomGetJSONOptions): Promise<JSONResponse>;
/**
 * Sets a JSON object at the registry entry corresponding to the publicKey and dataKey.
 *
 * @param this - SkynetClient
 * @param privateKey - The user private key.
 * @param dataKey - The key of the data to fetch for the given user.
 * @param json - The JSON data to set.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @throws - Will throw if the input keys are not valid strings.
 */
export declare function setJSON(this: SkynetClient, privateKey: string, dataKey: string, json: JsonData, customOptions?: CustomSetJSONOptions): Promise<JSONResponse>;
export declare function getOrCreateRegistryEntry(client: SkynetClient, publicKeyArray: Uint8Array, dataKey: string, json: JsonData, customOptions?: CustomSetJSONOptions): Promise<[RegistryEntry, string]>;
//# sourceMappingURL=skydb.d.ts.map