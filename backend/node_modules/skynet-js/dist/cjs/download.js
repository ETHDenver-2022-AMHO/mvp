"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveHns = exports.openFileHns = exports.openFile = exports.getFileContentRequest = exports.getFileContentHns = exports.getFileContent = exports.getMetadata = exports.getHnsresUrl = exports.getHnsUrl = exports.getSkylinkUrlForPortal = exports.getSkylinkUrl = exports.downloadFileHns = exports.downloadFile = exports.defaultDownloadOptions = void 0;
const options_1 = require("./utils/options");
const format_1 = require("./skylink/format");
const parse_1 = require("./skylink/parse");
const string_1 = require("./utils/string");
const url_1 = require("./utils/url");
const validation_1 = require("./utils/validation");
exports.defaultDownloadOptions = {
    ...options_1.defaultBaseOptions,
    endpointDownload: "/",
    download: false,
    noResponseMetadata: false,
    path: undefined,
    query: undefined,
    subdomain: false,
};
const defaultDownloadHnsOptions = {
    ...exports.defaultDownloadOptions,
    endpointDownloadHns: "hns",
    hnsSubdomain: "hns",
};
const defaultResolveHnsOptions = {
    ...options_1.defaultBaseOptions,
    endpointDownloadHnsres: "hnsres",
};
/**
 * Initiates a download of the content of the skylink within the browser.
 *
 * @param this - SkynetClient
 * @param skylinkUrl - 46-character skylink, or a valid skylink URL. Can be followed by a path. Note that the skylink will not be encoded, so if your path might contain special characters, consider using `customOptions.path`.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL that was used.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */
async function downloadFile(skylinkUrl, customOptions) {
    // Validation is done in `getSkylinkUrl`.
    const opts = { ...exports.defaultDownloadOptions, ...this.customOptions, ...customOptions, download: true };
    const url = await this.getSkylinkUrl(skylinkUrl, opts);
    // Download the url.
    window.location.assign(url);
    return url;
}
exports.downloadFile = downloadFile;
/**
 * Initiates a download of the content of the skylink at the Handshake domain.
 *
 * @param this - SkynetClient
 * @param domain - Handshake domain.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/hns"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL that was used.
 * @throws - Will throw if the input domain is not a string.
 */
async function downloadFileHns(domain, customOptions) {
    // Validation is done in `getHnsUrl`.
    const opts = { ...defaultDownloadHnsOptions, ...this.customOptions, ...customOptions, download: true };
    const url = await this.getHnsUrl(domain, opts);
    // Download the url.
    window.location.assign(url);
    return url;
}
exports.downloadFileHns = downloadFileHns;
/**
 * Constructs the full URL for the given skylink.
 *
 * @param this - SkynetClient
 * @param skylinkUrl - Skylink string. See `downloadFile`.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL for the skylink.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */
async function getSkylinkUrl(skylinkUrl, customOptions) {
    // Validation is done in `getSkylinkUrlForPortal`.
    const opts = { ...exports.defaultDownloadOptions, ...this.customOptions, ...customOptions };
    const portalUrl = await this.portalUrl();
    return getSkylinkUrlForPortal(portalUrl, skylinkUrl, opts);
}
exports.getSkylinkUrl = getSkylinkUrl;
/**
 * Gets the skylink URL without an initialized client.
 *
 * @param portalUrl - The portal URL.
 * @param skylinkUrl - Skylink string. See `downloadFile`.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @returns - The full URL for the skylink.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */
function getSkylinkUrlForPortal(portalUrl, skylinkUrl, customOptions) {
    var _a, _b;
    validation_1.validateString("portalUrl", portalUrl, "parameter");
    validation_1.validateString("skylinkUrl", skylinkUrl, "parameter");
    validation_1.validateOptionalObject("customOptions", customOptions, "parameter", exports.defaultDownloadOptions);
    const opts = { ...exports.defaultDownloadOptions, ...customOptions };
    const query = (_a = opts.query) !== null && _a !== void 0 ? _a : {};
    if (opts.download) {
        // Set the "attachment" parameter.
        query.attachment = true;
    }
    if (opts.noResponseMetadata) {
        // Set the "no-response-metadata" parameter.
        query["no-response-metadata"] = true;
    }
    // URL-encode the path.
    let path = "";
    if (opts.path) {
        if (typeof opts.path !== "string") {
            throw new Error(`opts.path has to be a string, ${typeof opts.path} provided`);
        }
        // Encode each element of the path separately and join them.
        //
        // Don't use encodeURI because it does not encode characters such as '?'
        // etc. These are allowed as filenames on Skynet and should be encoded so
        // they are not treated as URL separators.
        path = opts.path
            .split("/")
            .map((element) => encodeURIComponent(element))
            .join("/");
    }
    let url;
    if (opts.subdomain) {
        // Get the path from the skylink. Use the empty string if not found.
        const skylinkPath = (_b = parse_1.parseSkylink(skylinkUrl, { onlyPath: true })) !== null && _b !== void 0 ? _b : "";
        // Get just the skylink.
        let skylink = parse_1.parseSkylink(skylinkUrl);
        if (skylink === null) {
            throw new Error(`Could not get skylink out of input '${skylinkUrl}'`);
        }
        // Convert the skylink (without the path) to base32.
        skylink = format_1.convertSkylinkToBase32(skylink);
        url = url_1.addSubdomain(portalUrl, skylink);
        url = url_1.makeUrl(url, skylinkPath, path);
    }
    else {
        // Get the skylink including the path.
        const skylink = parse_1.parseSkylink(skylinkUrl, { includePath: true });
        if (skylink === null) {
            throw new Error(`Could not get skylink with path out of input '${skylinkUrl}'`);
        }
        // Add additional path if passed in.
        url = url_1.makeUrl(portalUrl, opts.endpointDownload, skylink, path);
    }
    return url_1.addUrlQuery(url, query);
}
exports.getSkylinkUrlForPortal = getSkylinkUrlForPortal;
/**
 * Constructs the full URL for the given HNS domain.
 *
 * @param this - SkynetClient
 * @param domain - Handshake domain.
 * @param [customOptions={}] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/hns"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL for the HNS domain.
 * @throws - Will throw if the input domain is not a string.
 */
async function getHnsUrl(domain, customOptions) {
    var _a;
    validation_1.validateString("domain", domain, "parameter");
    validation_1.validateOptionalObject("customOptions", customOptions, "parameter", defaultDownloadHnsOptions);
    const opts = { ...defaultDownloadHnsOptions, ...this.customOptions, ...customOptions };
    const query = (_a = opts.query) !== null && _a !== void 0 ? _a : {};
    if (opts.download) {
        query.attachment = true;
    }
    if (opts.noResponseMetadata) {
        query["no-response-metadata"] = true;
    }
    domain = string_1.trimUriPrefix(domain, url_1.uriHandshakePrefix);
    const portalUrl = await this.portalUrl();
    const url = opts.subdomain
        ? url_1.addSubdomain(url_1.addSubdomain(portalUrl, opts.hnsSubdomain), domain)
        : url_1.makeUrl(portalUrl, opts.endpointDownloadHns, domain);
    return url_1.addUrlQuery(url, query);
}
exports.getHnsUrl = getHnsUrl;
/**
 * Constructs the full URL for the resolver for the given HNS domain.
 *
 * @param this - SkynetClient
 * @param domain - Handshake domain.
 * @param [customOptions={}] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/hnsres"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL for the resolver for the HNS domain.
 * @throws - Will throw if the input domain is not a string.
 */
async function getHnsresUrl(domain, customOptions) {
    validation_1.validateString("domain", domain, "parameter");
    validation_1.validateOptionalObject("customOptions", customOptions, "parameter", defaultResolveHnsOptions);
    const opts = { ...defaultResolveHnsOptions, ...this.customOptions, ...customOptions };
    domain = string_1.trimUriPrefix(domain, url_1.uriHandshakeResolverPrefix);
    const portalUrl = await this.portalUrl();
    return url_1.makeUrl(portalUrl, opts.endpointDownloadHnsres, domain);
}
exports.getHnsresUrl = getHnsresUrl;
/**
 * Gets only the metadata for the given skylink without the contents.
 *
 * @param this - SkynetClient
 * @param skylinkUrl - Skylink string. See `downloadFile`.
 * @param [customOptions] - Additional settings that can optionally be set. See `downloadFile` for the full list.
 * @param [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 * @returns - The metadata in JSON format. Empty if no metadata was found.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */
async function getMetadata(skylinkUrl, customOptions) {
    // Validation is done in `getSkylinkUrl`.
    var _a, _b;
    const opts = { ...exports.defaultDownloadOptions, ...this.customOptions, ...customOptions };
    const url = await this.getSkylinkUrl(skylinkUrl, opts);
    const response = await this.executeRequest({
        ...opts,
        endpointPath: opts.endpointDownload,
        method: "head",
        url,
    });
    if (typeof response.headers === "undefined") {
        throw new Error("Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists.");
    }
    const contentType = (_a = response.headers["content-type"]) !== null && _a !== void 0 ? _a : "";
    const metadata = response.headers["skynet-file-metadata"] ? JSON.parse(response.headers["skynet-file-metadata"]) : {};
    const portalUrl = (_b = response.headers["skynet-portal-api"]) !== null && _b !== void 0 ? _b : "";
    const skylink = response.headers["skynet-skylink"] ? format_1.formatSkylink(response.headers["skynet-skylink"]) : "";
    return { contentType, metadata, portalUrl, skylink };
}
exports.getMetadata = getMetadata;
/**
 * Gets the contents of the file at the given skylink.
 *
 * @param this - SkynetClient
 * @param skylinkUrl - Skylink string. See `downloadFile`.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */
async function getFileContent(skylinkUrl, customOptions) {
    // Validation is done in `getSkylinkUrl`.
    const opts = { ...exports.defaultDownloadOptions, ...this.customOptions, ...customOptions };
    const url = await this.getSkylinkUrl(skylinkUrl, opts);
    return this.getFileContentRequest(url, opts);
}
exports.getFileContent = getFileContent;
/**
 * Gets the contents of the file at the given Handshake domain.
 *
 * @param this - SkynetClient
 * @param domain - Handshake domain.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/hns"] - The relative URL path of the portal endpoint to contact.
 * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.
 * @throws - Will throw if the domain does not contain a skylink.
 */
async function getFileContentHns(domain, customOptions) {
    // Validation is done in `getHnsUrl`.
    const opts = { ...defaultDownloadHnsOptions, ...this.customOptions, ...customOptions };
    const url = await this.getHnsUrl(domain, opts);
    return this.getFileContentRequest(url, opts);
}
exports.getFileContentHns = getFileContentHns;
/**
 * Does a GET request of the skylink, returning the data property of the response.
 *
 * @param this - SkynetClient
 * @param url - URL.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.
 * @throws - Will throw if the request does not succeed or the response is missing data.
 */
async function getFileContentRequest(url, customOptions) {
    // Not publicly available, don't validate input.
    var _a, _b;
    const opts = { ...exports.defaultDownloadOptions, ...this.customOptions, ...customOptions };
    // GET request the data at the skylink.
    const response = await this.executeRequest({
        ...opts,
        endpointPath: opts.endpointDownload,
        method: "get",
        url,
    });
    if (typeof response.data === "undefined") {
        throw new Error("Did not get 'data' in response despite a successful request. Please try again and report this issue to the devs if it persists.");
    }
    if (typeof response.headers === "undefined") {
        throw new Error("Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists.");
    }
    const contentType = (_a = response.headers["content-type"]) !== null && _a !== void 0 ? _a : "";
    const metadata = response.headers["skynet-file-metadata"] ? JSON.parse(response.headers["skynet-file-metadata"]) : {};
    const portalUrl = (_b = response.headers["skynet-portal-api"]) !== null && _b !== void 0 ? _b : "";
    const skylink = response.headers["skynet-skylink"] ? format_1.formatSkylink(response.headers["skynet-skylink"]) : "";
    return { data: response.data, contentType, portalUrl, metadata, skylink };
}
exports.getFileContentRequest = getFileContentRequest;
/**
 * Opens the content of the skylink within the browser.
 *
 * @param this - SkynetClient
 * @param skylinkUrl - Skylink string. See `downloadFile`.
 * @param [customOptions] - Additional settings that can optionally be set. See `downloadFile` for the full list.
 * @param [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL that was used.
 * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.
 */
async function openFile(skylinkUrl, customOptions) {
    // Validation is done in `getSkylinkUrl`.
    const opts = { ...exports.defaultDownloadOptions, ...this.customOptions, ...customOptions };
    const url = await this.getSkylinkUrl(skylinkUrl, opts);
    window.open(url, "_blank");
    return url;
}
exports.openFile = openFile;
/**
 * Opens the content of the skylink from the given Handshake domain within the browser.
 *
 * @param this - SkynetClient
 * @param domain - Handshake domain.
 * @param [customOptions] - Additional settings that can optionally be set. See `downloadFileHns` for the full list.
 * @param [customOptions.endpointPath="/hns"] - The relative URL path of the portal endpoint to contact.
 * @returns - The full URL that was used.
 * @throws - Will throw if the input domain is not a string.
 */
async function openFileHns(domain, customOptions) {
    // Validation is done in `getHnsUrl`.
    const opts = { ...defaultDownloadHnsOptions, ...this.customOptions, ...customOptions };
    const url = await this.getHnsUrl(domain, opts);
    // Open the url in a new tab.
    window.open(url, "_blank");
    return url;
}
exports.openFileHns = openFileHns;
/**
 * Resolves the given HNS domain to its TXT record and returns the data.
 *
 * @param this - SkynetClient
 * @param domain - Handshake resolver domain.
 * @param [customOptions={}] - Additional settings that can optionally be set.
 * @param [customOptions.endpointPath="/hnsres"] - The relative URL path of the portal endpoint to contact.
 * @returns - The data for the TXT record.
 * @throws - Will throw if the input domain is not a string.
 */
async function resolveHns(domain, customOptions) {
    // Validation is done in `getHnsresUrl`.
    const opts = { ...defaultResolveHnsOptions, ...this.customOptions, ...customOptions };
    const url = await this.getHnsresUrl(domain, opts);
    // Get the txt record from the hnsres domain on the portal.
    const response = await this.executeRequest({
        ...opts,
        endpointPath: opts.endpointDownloadHnsres,
        method: "get",
        url,
    });
    validateResolveHnsResponse(response);
    return response.data;
}
exports.resolveHns = resolveHns;
function validateResolveHnsResponse(response) {
    try {
        if (!response.data) {
            throw new Error("response.data field missing");
        }
        validation_1.validateString("response.data.skylink", response.data.skylink, "upload response field");
    }
    catch (err) {
        throw new Error(`Did not get a complete resolve HNS response despite a successful request. Please try again and report this issue to the devs if it persists. Error: ${err}`);
    }
}
