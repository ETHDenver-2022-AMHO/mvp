"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrCreateRegistryEntry = exports.setJSON = exports.getJSON = exports.defaultSetJSONOptions = exports.defaultGetJSONOptions = exports.JSON_RESPONSE_VERSION = void 0;
const tweetnacl_1 = require("tweetnacl");
const registry_1 = require("./registry");
const number_1 = require("./utils/number");
const url_1 = require("./utils/url");
const string_1 = require("./utils/string");
const upload_1 = require("./upload");
const download_1 = require("./download");
const validation_1 = require("./utils/validation");
const options_1 = require("./utils/options");
exports.JSON_RESPONSE_VERSION = 2;
exports.defaultGetJSONOptions = {
    ...options_1.defaultBaseOptions,
    ...registry_1.defaultGetEntryOptions,
    ...download_1.defaultDownloadOptions,
    cachedDataLink: undefined,
};
exports.defaultSetJSONOptions = {
    ...options_1.defaultBaseOptions,
    ...exports.defaultGetJSONOptions,
    ...registry_1.defaultSetEntryOptions,
    ...upload_1.defaultUploadOptions,
};
/**
 * Gets the JSON object corresponding to the publicKey and dataKey.
 *
 * @param this - SkynetClient
 * @param publicKey - The user public key.
 * @param dataKey - The key of the data to fetch for the given user.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @returns - The returned JSON and revision number.
 * @throws - Will throw if the returned signature does not match the returned entry, or if the skylink in the entry is invalid.
 */
async function getJSON(publicKey, dataKey, customOptions) {
    validation_1.validateOptionalObject("customOptions", customOptions, "parameter", exports.defaultGetJSONOptions);
    // Rest of validation is done in `getEntry`.
    const opts = {
        ...exports.defaultGetJSONOptions,
        ...this.customOptions,
        ...customOptions,
    };
    // Lookup the registry entry.
    const getEntryOpts = options_1.extractOptions(opts, registry_1.defaultGetEntryOptions);
    const { entry } = await this.registry.getEntry(publicKey, dataKey, getEntryOpts);
    if (entry === null) {
        return { data: null, dataLink: null };
    }
    const dataLink = entry.data;
    // If a cached data link is provided and the data link hasn't changed, return.
    if (opts.cachedDataLink && dataLink === opts.cachedDataLink) {
        return { data: null, dataLink };
    }
    // Download the data in the returned data link.
    const downloadOpts = options_1.extractOptions(opts, download_1.defaultDownloadOptions);
    const { data } = await this.getFileContent(dataLink, downloadOpts);
    if (typeof data !== "object" || data === null) {
        throw new Error(`File data for the entry at data key '${dataKey}' is not JSON.`);
    }
    if (!(data["_data"] && data["_v"])) {
        // Legacy data prior to v4, return as-is.
        return { data, dataLink };
    }
    const actualData = data["_data"];
    if (typeof actualData !== "object" || data === null) {
        throw new Error(`File data '_data' for the entry at data key '${dataKey}' is not JSON.`);
    }
    return { data: actualData, dataLink };
}
exports.getJSON = getJSON;
/**
 * Sets a JSON object at the registry entry corresponding to the publicKey and dataKey.
 *
 * @param this - SkynetClient
 * @param privateKey - The user private key.
 * @param dataKey - The key of the data to fetch for the given user.
 * @param json - The JSON data to set.
 * @param [customOptions] - Additional settings that can optionally be set.
 * @throws - Will throw if the input keys are not valid strings.
 */
async function setJSON(privateKey, dataKey, json, customOptions) {
    validation_1.validateHexString("privateKey", privateKey, "parameter");
    validation_1.validateString("dataKey", dataKey, "parameter");
    validation_1.validateObject("json", json, "parameter");
    validation_1.validateOptionalObject("customOptions", customOptions, "parameter", exports.defaultSetJSONOptions);
    const opts = {
        ...exports.defaultSetJSONOptions,
        ...this.customOptions,
        ...customOptions,
    };
    const { publicKey: publicKeyArray } = tweetnacl_1.sign.keyPair.fromSecretKey(string_1.hexToUint8Array(privateKey));
    const [entry, skylink] = await getOrCreateRegistryEntry(this, publicKeyArray, dataKey, json, opts);
    // Update the registry.
    const setEntryOpts = options_1.extractOptions(opts, registry_1.defaultSetEntryOptions);
    await this.registry.setEntry(privateKey, entry, setEntryOpts);
    return { data: json, dataLink: skylink };
}
exports.setJSON = setJSON;
async function getOrCreateRegistryEntry(client, publicKeyArray, dataKey, json, customOptions) {
    // Not publicly available, don't validate input.
    const opts = {
        ...exports.defaultSetJSONOptions,
        ...client.customOptions,
        ...customOptions,
    };
    // Set the hidden _data and _v fields.
    const data = { _data: json, _v: exports.JSON_RESPONSE_VERSION };
    // Create the data to upload to acquire its skylink.
    let dataKeyHex = dataKey;
    if (!opts.hashedDataKeyHex) {
        dataKeyHex = string_1.toHexString(string_1.stringToUint8ArrayUtf8(dataKey));
    }
    const file = new File([JSON.stringify(data)], `dk:${dataKeyHex}`, { type: "application/json" });
    // Start file upload, do not block.
    const uploadOpts = options_1.extractOptions(opts, upload_1.defaultUploadOptions);
    const skyfilePromise = client.uploadFile(file, uploadOpts);
    // Fetch the current value to find out the revision.
    //
    // Start getEntry, do not block.
    const getEntryOpts = options_1.extractOptions(opts, registry_1.defaultGetEntryOptions);
    const entryPromise = client.registry.getEntry(string_1.toHexString(publicKeyArray), dataKey, getEntryOpts);
    // Block until both getEntry and uploadFile are finished.
    const [signedEntry, skyfile] = await Promise.all([
        entryPromise,
        skyfilePromise,
    ]);
    let revision;
    if (signedEntry.entry === null) {
        revision = BigInt(0);
    }
    else {
        revision = signedEntry.entry.revision + BigInt(1);
    }
    // Throw if the revision is already the maximum value.
    if (revision > number_1.MAX_REVISION) {
        throw new Error("Current entry already has maximum allowed revision, could not update the entry");
    }
    // Assert the input is 64 bits.
    number_1.assertUint64(revision);
    // Build the registry value.
    const dataLink = skyfile.skylink;
    const entry = {
        dataKey,
        data: string_1.trimUriPrefix(dataLink, url_1.uriSkynetPrefix),
        revision,
    };
    return [entry, dataLink];
}
exports.getOrCreateRegistryEntry = getOrCreateRegistryEntry;
